
Project_UNO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a7a  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075d  00000000  00000000  00000e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ec  00000000  00000000  0000159f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000429  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023d  00000000  00000000  00001e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000020c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
  88:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <spi_slave_init>:
/* ===========================================================
   SPI  (slave, interrupt-driven)
   ===========================================================*/
static void spi_slave_init(void)
{
    DDRB |= _BV(PB4);             /* MISO out          */
  90:	84 b1       	in	r24, 0x04	; 4
  92:	80 61       	ori	r24, 0x10	; 16
  94:	84 b9       	out	0x04, r24	; 4
    SPCR  = _BV(SPE) | _BV(SPIE); /* enable + ISR      */
  96:	80 ec       	ldi	r24, 0xC0	; 192
  98:	8c bd       	out	0x2c, r24	; 44
  9a:	08 95       	ret

0000009c <buzzer_init>:
/* ===========================================================
   BUZZER  (Timer-1 CTC toggling BUZZER_PIN in ISR)
   ===========================================================*/
static void buzzer_init(void)
{
    DDRD  |= _BV(BUZZER_PIN);      /* make PD3 an output */
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	8a b9       	out	0x0a, r24	; 10
    TCCR1A = 0;                    /* normal port ops    */
  a2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = _BV(WGM12);           /* CTC, clk stopped   */
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  ac:	08 95       	ret

000000ae <tone_start>:
}

/* -------- note player helpers -------- */
static void tone_start(uint16_t ocr1a_val)
{
    OCR1A  = ocr1a_val;
  ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    TCNT1  = 0;
  b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    TCCR1B |= _BV(CS10);           /* start Timer1, 1:1 prescale */
  be:	e1 e8       	ldi	r30, 0x81	; 129
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	80 83       	st	Z, r24
    TIMSK1 |= _BV(OCIE1A);         /* enable compare ISR         */
  c8:	ef e6       	ldi	r30, 0x6F	; 111
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <tone_stop>:
}

static void tone_stop(void)
{
    TCCR1B &= ~_BV(CS10);          /* stop clock        */
  d4:	e1 e8       	ldi	r30, 0x81	; 129
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8e 7f       	andi	r24, 0xFE	; 254
  dc:	80 83       	st	Z, r24
    TIMSK1 &= ~_BV(OCIE1A);        /* disable ISR       */
  de:	ef e6       	ldi	r30, 0x6F	; 111
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8d 7f       	andi	r24, 0xFD	; 253
  e6:	80 83       	st	Z, r24
    PORTD  &= ~_BV(BUZZER_PIN);    /* ensure low level  */
  e8:	8b b1       	in	r24, 0x0b	; 11
  ea:	87 7f       	andi	r24, 0xF7	; 247
  ec:	8b b9       	out	0x0b, r24	; 11
  ee:	08 95       	ret

000000f0 <play_note>:
}

/* -------- emergency note util -------- */
static void play_note(uint16_t ocr, uint16_t ms)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	eb 01       	movw	r28, r22
    tone_start(ocr);
  f6:	0e 94 57 00 	call	0xae	; 0xae <tone_start>
    while (ms--) _delay_ms(1);
  fa:	07 c0       	rjmp	.+14     	; 0x10a <play_note+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	ef e9       	ldi	r30, 0x9F	; 159
  fe:	ff e0       	ldi	r31, 0x0F	; 15
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <play_note+0x10>
 104:	00 c0       	rjmp	.+0      	; 0x106 <play_note+0x16>
 106:	00 00       	nop
 108:	ec 01       	movw	r28, r24
 10a:	ce 01       	movw	r24, r28
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	cd 2b       	or	r28, r29
 110:	a9 f7       	brne	.-22     	; 0xfc <play_note+0xc>
    tone_stop();
 112:	0e 94 6a 00 	call	0xd4	; 0xd4 <tone_stop>
 116:	ff ef       	ldi	r31, 0xFF	; 255
 118:	20 e7       	ldi	r18, 0x70	; 112
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	f1 50       	subi	r31, 0x01	; 1
 11e:	20 40       	sbci	r18, 0x00	; 0
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <play_note+0x2c>
 124:	00 c0       	rjmp	.+0      	; 0x126 <play_note+0x36>
 126:	00 00       	nop
    _delay_ms(50);                 /* short pause */
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <play_melody>:

static void play_melody(void)
{
    play_note(27235, 62);   play_note(27235, 62);   /* D4 D4 */
 12e:	6e e3       	ldi	r22, 0x3E	; 62
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	83 e6       	ldi	r24, 0x63	; 99
 134:	9a e6       	ldi	r25, 0x6A	; 106
 136:	0e 94 78 00 	call	0xf0	; 0xf0 <play_note>
 13a:	6e e3       	ldi	r22, 0x3E	; 62
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	83 e6       	ldi	r24, 0x63	; 99
 140:	9a e6       	ldi	r25, 0x6A	; 106
 142:	0e 94 78 00 	call	0xf0	; 0xf0 <play_note>
    play_note(13617, 104);  play_note(18181, 104);  /* D5 A4 */
 146:	68 e6       	ldi	r22, 0x68	; 104
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	81 e3       	ldi	r24, 0x31	; 49
 14c:	95 e3       	ldi	r25, 0x35	; 53
 14e:	0e 94 78 00 	call	0xf0	; 0xf0 <play_note>
 152:	68 e6       	ldi	r22, 0x68	; 104
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	97 e4       	ldi	r25, 0x47	; 71
 15a:	0e 94 78 00 	call	0xf0	; 0xf0 <play_note>
    play_note(19230, 250);  play_note(20408, 250);  /* G#4 G4 */
 15e:	6a ef       	ldi	r22, 0xFA	; 250
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	8e e1       	ldi	r24, 0x1E	; 30
 164:	9b e4       	ldi	r25, 0x4B	; 75
 166:	0e 94 78 00 	call	0xf0	; 0xf0 <play_note>
 16a:	6a ef       	ldi	r22, 0xFA	; 250
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	88 eb       	ldi	r24, 0xB8	; 184
 170:	9f e4       	ldi	r25, 0x4F	; 79
 172:	0e 94 78 00 	call	0xf0	; 0xf0 <play_note>
    play_note(22907, 62);   play_note(27235, 62);   /* F4 D4 */
 176:	6e e3       	ldi	r22, 0x3E	; 62
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	8b e7       	ldi	r24, 0x7B	; 123
 17c:	99 e5       	ldi	r25, 0x59	; 89
 17e:	0e 94 78 00 	call	0xf0	; 0xf0 <play_note>
 182:	6e e3       	ldi	r22, 0x3E	; 62
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	83 e6       	ldi	r24, 0x63	; 99
 188:	9a e6       	ldi	r25, 0x6A	; 106
 18a:	0e 94 78 00 	call	0xf0	; 0xf0 <play_note>
    play_note(22907, 62);   play_note(20408, 62);   /* F4 G4 */
 18e:	6e e3       	ldi	r22, 0x3E	; 62
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	8b e7       	ldi	r24, 0x7B	; 123
 194:	99 e5       	ldi	r25, 0x59	; 89
 196:	0e 94 78 00 	call	0xf0	; 0xf0 <play_note>
 19a:	6e e3       	ldi	r22, 0x3E	; 62
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	88 eb       	ldi	r24, 0xB8	; 184
 1a0:	9f e4       	ldi	r25, 0x4F	; 79
 1a2:	0e 94 78 00 	call	0xf0	; 0xf0 <play_note>
    play_note(15287, 62);                           /* C5    */
 1a6:	6e e3       	ldi	r22, 0x3E	; 62
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	87 eb       	ldi	r24, 0xB7	; 183
 1ac:	9b e3       	ldi	r25, 0x3B	; 59
 1ae:	0e 94 78 00 	call	0xf0	; 0xf0 <play_note>
 1b2:	08 95       	ret

000001b4 <__vector_17>:
    DDRB |= _BV(PB4);             /* MISO out          */
    SPCR  = _BV(SPE) | _BV(SPIE); /* enable + ISR      */
}

ISR(SPI_STC_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
    uint8_t cmd = SPDR;
 1c0:	8e b5       	in	r24, 0x2e	; 46

    switch (cmd)
 1c2:	82 31       	cpi	r24, 0x12	; 18
 1c4:	a9 f0       	breq	.+42     	; 0x1f0 <__vector_17+0x3c>
 1c6:	28 f4       	brcc	.+10     	; 0x1d2 <__vector_17+0x1e>
 1c8:	80 31       	cpi	r24, 0x10	; 16
 1ca:	51 f0       	breq	.+20     	; 0x1e0 <__vector_17+0x2c>
 1cc:	81 31       	cpi	r24, 0x11	; 17
 1ce:	61 f0       	breq	.+24     	; 0x1e8 <__vector_17+0x34>
 1d0:	1e c0       	rjmp	.+60     	; 0x20e <__vector_17+0x5a>
 1d2:	80 32       	cpi	r24, 0x20	; 32
 1d4:	a9 f0       	breq	.+42     	; 0x200 <__vector_17+0x4c>
 1d6:	85 32       	cpi	r24, 0x25	; 37
 1d8:	b9 f0       	breq	.+46     	; 0x208 <__vector_17+0x54>
 1da:	83 31       	cpi	r24, 0x13	; 19
 1dc:	c1 f4       	brne	.+48     	; 0x20e <__vector_17+0x5a>
 1de:	0c c0       	rjmp	.+24     	; 0x1f8 <__vector_17+0x44>
    {
    case CMD_MOVEMENT_LED_ON:      PORTB |=  _BV(MOV_LED_PIN);  break;
 1e0:	85 b1       	in	r24, 0x05	; 5
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	85 b9       	out	0x05, r24	; 5
 1e6:	13 c0       	rjmp	.+38     	; 0x20e <__vector_17+0x5a>
    case CMD_MOVEMENT_LED_OFF:     PORTB &= ~_BV(MOV_LED_PIN);  break;
 1e8:	85 b1       	in	r24, 0x05	; 5
 1ea:	8e 7f       	andi	r24, 0xFE	; 254
 1ec:	85 b9       	out	0x05, r24	; 5
 1ee:	0f c0       	rjmp	.+30     	; 0x20e <__vector_17+0x5a>
    case CMD_DOOR_LED_ON:          PORTB |=  _BV(DOOR_LED_PIN); break;
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	85 b9       	out	0x05, r24	; 5
 1f6:	0b c0       	rjmp	.+22     	; 0x20e <__vector_17+0x5a>
    case CMD_DOOR_LED_OFF:         PORTB &= ~_BV(DOOR_LED_PIN); break;
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	85 b9       	out	0x05, r24	; 5
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <__vector_17+0x5a>
    case CMD_BUZZER_PLAY_ONESHOT:  buzzer_request = 1;          break;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <buzzer_request>
 206:	03 c0       	rjmp	.+6      	; 0x20e <__vector_17+0x5a>
    case CMD_DING:                 ding_request = 1;            break;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

    default: break;
    }
}
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_11>:
    TCCR1A = 0;                    /* normal port ops    */
    TCCR1B = _BV(WGM12);           /* CTC, clk stopped   */
}

ISR(TIMER1_COMPA_vect)
{
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
    PORTD ^= _BV(BUZZER_PIN);      /* toggle every compare match */
 228:	9b b1       	in	r25, 0x0b	; 11
 22a:	88 e0       	ldi	r24, 0x08	; 8
 22c:	89 27       	eor	r24, r25
 22e:	8b b9       	out	0x0b, r24	; 11
}
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <main>:
   MAIN
   ===========================================================*/
int main(void)
{
    /* LEDs */
    DDRB  |= _BV(MOV_LED_PIN) | _BV(DOOR_LED_PIN);
 23e:	84 b1       	in	r24, 0x04	; 4
 240:	83 60       	ori	r24, 0x03	; 3
 242:	84 b9       	out	0x04, r24	; 4
    PORTB &= ~(_BV(MOV_LED_PIN) | _BV(DOOR_LED_PIN));
 244:	85 b1       	in	r24, 0x05	; 5
 246:	8c 7f       	andi	r24, 0xFC	; 252
 248:	85 b9       	out	0x05, r24	; 5

    buzzer_init();
 24a:	0e 94 4e 00 	call	0x9c	; 0x9c <buzzer_init>
    spi_slave_init();
 24e:	0e 94 48 00 	call	0x90	; 0x90 <spi_slave_init>
    sei();
 252:	78 94       	sei

    for (;;)
    {
        if (buzzer_request)
 254:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <buzzer_request>
 258:	88 23       	and	r24, r24
 25a:	21 f0       	breq	.+8      	; 0x264 <main+0x26>
        {
            buzzer_request = 0;
 25c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <buzzer_request>
            play_melody();         /* ~1.7 s blocking OK on slave */
 260:	0e 94 97 00 	call	0x12e	; 0x12e <play_melody>
        }
        if (ding_request)
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 268:	88 23       	and	r24, r24
 26a:	a1 f3       	breq	.-24     	; 0x254 <main+0x16>
        {
            ding_request= 0;
 26c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

/* floor arrival ding */
static inline void play_ding(void)
{
    /* 500 Hz, 100 ms */
    play_note(16000, 100);      /* OCR1A = 16000 ⇒ ~500 Hz */
 270:	64 e6       	ldi	r22, 0x64	; 100
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e8       	ldi	r24, 0x80	; 128
 276:	9e e3       	ldi	r25, 0x3E	; 62
 278:	0e 94 78 00 	call	0xf0	; 0xf0 <play_note>
 27c:	eb cf       	rjmp	.-42     	; 0x254 <main+0x16>

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
