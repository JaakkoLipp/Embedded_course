
Project_MEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800200  00000e7a  00000f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800258  00800258  00000f66  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d40  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000107c  00000000  00000000  00002e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e25  00000000  00000000  00003f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00004d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f8  00000000  00000000  00004fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bc2  00000000  00000000  000057cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  0000638e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
   2:	00 00       	nop
   4:	06 c1       	rjmp	.+524    	; 0x212 <__bad_interrupt>
   6:	00 00       	nop
   8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
   a:	00 00       	nop
   c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
  12:	00 00       	nop
  14:	19 c3       	rjmp	.+1586   	; 0x648 <__vector_5>
  16:	00 00       	nop
  18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
  22:	00 00       	nop
  24:	f6 c0       	rjmp	.+492    	; 0x212 <__bad_interrupt>
  26:	00 00       	nop
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
  32:	00 00       	nop
  34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
  36:	00 00       	nop
  38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
  42:	00 00       	nop
  44:	10 c3       	rjmp	.+1568   	; 0x666 <__vector_17>
  46:	00 00       	nop
  48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e0 c0       	rjmp	.+448    	; 0x212 <__bad_interrupt>
  52:	00 00       	nop
  54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
  56:	00 00       	nop
  58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d8 c0       	rjmp	.+432    	; 0x212 <__bad_interrupt>
  62:	00 00       	nop
  64:	d6 c0       	rjmp	.+428    	; 0x212 <__bad_interrupt>
  66:	00 00       	nop
  68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
  72:	00 00       	nop
  74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
  76:	00 00       	nop
  78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
  82:	00 00       	nop
  84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
  86:	00 00       	nop
  88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
  92:	00 00       	nop
  94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
  96:	00 00       	nop
  98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
  da:	00 00       	nop
  dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
  de:	00 00       	nop
  e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	7f 01       	movw	r14, r30
  e6:	87 01       	movw	r16, r14
  e8:	87 01       	movw	r16, r14
  ea:	87 01       	movw	r16, r14
  ec:	81 01       	movw	r16, r2
  ee:	87 01       	movw	r16, r14
  f0:	83 01       	movw	r16, r6
  f2:	85 01       	movw	r16, r10
  f4:	87 01       	movw	r16, r14
  f6:	87 01       	movw	r16, r14
  f8:	87 01       	movw	r16, r14
  fa:	87 01       	movw	r16, r14
  fc:	87 01       	movw	r16, r14
  fe:	87 01       	movw	r16, r14
 100:	87 01       	movw	r16, r14
 102:	87 01       	movw	r16, r14
 104:	87 01       	movw	r16, r14
 106:	87 01       	movw	r16, r14
 108:	87 01       	movw	r16, r14
 10a:	87 01       	movw	r16, r14
 10c:	87 01       	movw	r16, r14
 10e:	87 01       	movw	r16, r14
 110:	87 01       	movw	r16, r14
 112:	87 01       	movw	r16, r14
 114:	87 01       	movw	r16, r14
 116:	87 01       	movw	r16, r14
 118:	87 01       	movw	r16, r14
 11a:	87 01       	movw	r16, r14
 11c:	87 01       	movw	r16, r14
 11e:	87 01       	movw	r16, r14
 120:	87 01       	movw	r16, r14
 122:	87 01       	movw	r16, r14
 124:	87 01       	movw	r16, r14
 126:	87 01       	movw	r16, r14
 128:	87 01       	movw	r16, r14
 12a:	87 01       	movw	r16, r14
 12c:	87 01       	movw	r16, r14
 12e:	87 01       	movw	r16, r14
 130:	87 01       	movw	r16, r14
 132:	87 01       	movw	r16, r14
 134:	87 01       	movw	r16, r14
 136:	87 01       	movw	r16, r14
 138:	87 01       	movw	r16, r14
 13a:	87 01       	movw	r16, r14
 13c:	87 01       	movw	r16, r14
 13e:	87 01       	movw	r16, r14
 140:	87 01       	movw	r16, r14
 142:	87 01       	movw	r16, r14
 144:	87 01       	movw	r16, r14
 146:	87 01       	movw	r16, r14
 148:	87 01       	movw	r16, r14
 14a:	87 01       	movw	r16, r14
 14c:	87 01       	movw	r16, r14
 14e:	87 01       	movw	r16, r14
 150:	87 01       	movw	r16, r14
 152:	87 01       	movw	r16, r14
 154:	87 01       	movw	r16, r14
 156:	87 01       	movw	r16, r14
 158:	87 01       	movw	r16, r14
 15a:	87 01       	movw	r16, r14
 15c:	87 01       	movw	r16, r14
 15e:	87 01       	movw	r16, r14
 160:	87 01       	movw	r16, r14
 162:	87 01       	movw	r16, r14
 164:	77 01       	movw	r14, r14
 166:	87 01       	movw	r16, r14
 168:	87 01       	movw	r16, r14
 16a:	87 01       	movw	r16, r14
 16c:	79 01       	movw	r14, r18
 16e:	87 01       	movw	r16, r14
 170:	7b 01       	movw	r14, r22
 172:	7d 01       	movw	r14, r26
 174:	87 01       	movw	r16, r14
 176:	87 01       	movw	r16, r14
 178:	87 01       	movw	r16, r14
 17a:	87 01       	movw	r16, r14
 17c:	87 01       	movw	r16, r14
 17e:	87 01       	movw	r16, r14
 180:	87 01       	movw	r16, r14
 182:	87 01       	movw	r16, r14
 184:	87 01       	movw	r16, r14
 186:	87 01       	movw	r16, r14
 188:	87 01       	movw	r16, r14
 18a:	87 01       	movw	r16, r14
 18c:	87 01       	movw	r16, r14
 18e:	87 01       	movw	r16, r14
 190:	87 01       	movw	r16, r14
 192:	87 01       	movw	r16, r14
 194:	87 01       	movw	r16, r14
 196:	87 01       	movw	r16, r14
 198:	87 01       	movw	r16, r14
 19a:	87 01       	movw	r16, r14
 19c:	87 01       	movw	r16, r14
 19e:	87 01       	movw	r16, r14
 1a0:	87 01       	movw	r16, r14
 1a2:	87 01       	movw	r16, r14
 1a4:	6f 01       	movw	r12, r30
 1a6:	87 01       	movw	r16, r14
 1a8:	87 01       	movw	r16, r14
 1aa:	87 01       	movw	r16, r14
 1ac:	71 01       	movw	r14, r2
 1ae:	87 01       	movw	r16, r14
 1b0:	73 01       	movw	r14, r6
 1b2:	75 01       	movw	r14, r10
 1b4:	87 01       	movw	r16, r14
 1b6:	87 01       	movw	r16, r14
 1b8:	87 01       	movw	r16, r14
 1ba:	87 01       	movw	r16, r14
 1bc:	87 01       	movw	r16, r14
 1be:	87 01       	movw	r16, r14
 1c0:	87 01       	movw	r16, r14
 1c2:	87 01       	movw	r16, r14
 1c4:	69 01       	movw	r12, r18
 1c6:	87 01       	movw	r16, r14
 1c8:	87 01       	movw	r16, r14
 1ca:	87 01       	movw	r16, r14
 1cc:	89 01       	movw	r16, r18
 1ce:	87 01       	movw	r16, r14
 1d0:	6b 01       	movw	r12, r22
 1d2:	6d 01       	movw	r12, r26

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	d1 e2       	ldi	r29, 0x21	; 33
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
 1e4:	12 e0       	ldi	r17, 0x02	; 2
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	ea e7       	ldi	r30, 0x7A	; 122
 1ec:	fe e0       	ldi	r31, 0x0E	; 14
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0b bf       	out	0x3b, r16	; 59
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
 1f4:	07 90       	elpm	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	a8 35       	cpi	r26, 0x58	; 88
 1fa:	b1 07       	cpc	r27, r17
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
 1fe:	22 e0       	ldi	r18, 0x02	; 2
 200:	a8 e5       	ldi	r26, 0x58	; 88
 202:	b2 e0       	ldi	r27, 0x02	; 2
 204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
 206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
 208:	ad 35       	cpi	r26, 0x5D	; 93
 20a:	b2 07       	cpc	r27, r18
 20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
 20e:	50 d2       	rcall	.+1184   	; 0x6b0 <main>
 210:	32 c6       	rjmp	.+3172   	; 0xe76 <_exit>

00000212 <__bad_interrupt>:
 212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <keypad_ScanKey>:
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 214:	20 e0       	ldi	r18, 0x00	; 0
        4.Return the ScanCode(Combination of ROW & COL) for decoding the key.
 ***************************************************************************************************/
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;
 216:	9f ee       	ldi	r25, 0xEF	; 239

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 218:	10 c0       	rjmp	.+32     	; 0x23a <keypad_ScanKey+0x26>
	{
		M_ROW=var_keyScanCode_u8;        // Select 1-Row at a time for Scanning the Key
 21a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	e9 ef       	ldi	r30, 0xF9	; 249
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <keypad_ScanKey+0xe>
 226:	00 c0       	rjmp	.+0      	; 0x228 <keypad_ScanKey+0x14>
 228:	00 00       	nop
		DELAY_ms(1);
		var_keyPress_u8=M_COL & 0x0F;    // Read the Column, for key press
 22a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 22e:	8f 70       	andi	r24, 0x0F	; 15

		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
 230:	8f 30       	cpi	r24, 0x0F	; 15
 232:	29 f4       	brne	.+10     	; 0x23e <keypad_ScanKey+0x2a>
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
 234:	99 0f       	add	r25, r25
 236:	9f 5f       	subi	r25, 0xFF	; 255
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	24 30       	cpi	r18, 0x04	; 4
 23c:	70 f3       	brcs	.-36     	; 0x21a <keypad_ScanKey+0x6>
		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
	}
	var_keyPress_u8 = var_keyPress_u8 + (var_keyScanCode_u8 & 0xf0); // Return the row and COL status to decode the key
 23e:	90 7f       	andi	r25, 0xF0	; 240
	return(var_keyPress_u8);
}
 240:	89 0f       	add	r24, r25
 242:	08 95       	ret

00000244 <KEYPAD_Init>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
 244:	80 ef       	ldi	r24, 0xF0	; 240
 246:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 24a:	08 95       	ret

0000024c <KEYPAD_WaitForKeyRelease>:
	uint8_t key;
	do
	{
		do
		{
			M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 24c:	8f e0       	ldi	r24, 0x0F	; 15
 24e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			key=M_COL & 0x0F;     // Read the Columns, to check the key press
 252:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 256:	8f 70       	andi	r24, 0x0F	; 15
		}while(key!=0x0F);
 258:	8f 30       	cpi	r24, 0x0F	; 15
 25a:	c1 f7       	brne	.-16     	; 0x24c <KEYPAD_WaitForKeyRelease>
 25c:	89 ef       	ldi	r24, 0xF9	; 249
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <KEYPAD_WaitForKeyRelease+0x14>
 264:	00 c0       	rjmp	.+0      	; 0x266 <KEYPAD_WaitForKeyRelease+0x1a>
 266:	00 00       	nop

		DELAY_ms(1);

		M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		key=M_COL & 0x0F;     // Read the Columns, to check the key press
 26e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 272:	8f 70       	andi	r24, 0x0F	; 15
	}while(key!=0x0F);   // Wait till the Key is released,
 274:	8f 30       	cpi	r24, 0x0F	; 15
 276:	51 f7       	brne	.-44     	; 0x24c <KEYPAD_WaitForKeyRelease>
	                     // If no Key is pressed, Column lines will be High(0x0F)
}
 278:	08 95       	ret

0000027a <KEYPAD_WaitForKeyPress>:
	uint8_t var_keyPress_u8;
	do
	{
		do
		{
			M_ROW=0x0F;		  // Pull the ROW lines to low and Column lines high.
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			var_keyPress_u8=M_COL & 0x0F;	  // Read the Columns, to check the key press
 280:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 284:	8f 70       	andi	r24, 0x0F	; 15
		}while(var_keyPress_u8==0x0F); // Wait till the Key is pressed,
 286:	8f 30       	cpi	r24, 0x0F	; 15
 288:	c1 f3       	breq	.-16     	; 0x27a <KEYPAD_WaitForKeyPress>
 28a:	89 ef       	ldi	r24, 0xF9	; 249
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <KEYPAD_WaitForKeyPress+0x14>
 292:	00 c0       	rjmp	.+0      	; 0x294 <KEYPAD_WaitForKeyPress+0x1a>
 294:	00 00       	nop
		// if a Key is pressed the corresponding Column line go low

		DELAY_ms(1);		  // Wait for some time(debounce Time);

		M_ROW=0x0F;		  // After debounce time, perform the above operation
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.
 29c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 2a0:	8f 70       	andi	r24, 0x0F	; 15

	}while(var_keyPress_u8==0x0F);
 2a2:	8f 30       	cpi	r24, 0x0F	; 15
 2a4:	51 f3       	breq	.-44     	; 0x27a <KEYPAD_WaitForKeyPress>
}
 2a6:	08 95       	ret

000002a8 <KEYPAD_GetKey>:
 ***************************************************************************************************/
uint8_t KEYPAD_GetKey()
{
	uint8_t var_keyPress_u8;

	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
 2a8:	d1 df       	rcall	.-94     	; 0x24c <KEYPAD_WaitForKeyRelease>
 2aa:	89 ef       	ldi	r24, 0xF9	; 249
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <KEYPAD_GetKey+0x6>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <KEYPAD_GetKey+0xc>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
 2b4:	00 00       	nop
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
 2b6:	e1 df       	rcall	.-62     	; 0x27a <KEYPAD_WaitForKeyPress>
 2b8:	ad df       	rcall	.-166    	; 0x214 <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	fc 01       	movw	r30, r24
 2be:	e7 57       	subi	r30, 0x77	; 119
 2c0:	f1 09       	sbc	r31, r1
 2c2:	e8 37       	cpi	r30, 0x78	; 120
 2c4:	f1 05       	cpc	r31, r1
 2c6:	18 f5       	brcc	.+70     	; 0x30e <KEYPAD_GetKey+0x66>
 2c8:	88 27       	eor	r24, r24
 2ca:	ee 58       	subi	r30, 0x8E	; 142
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	8f 4f       	sbci	r24, 0xFF	; 255
 2d0:	e0 c2       	rjmp	.+1472   	; 0x892 <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
 2d2:	8a e2       	ldi	r24, 0x2A	; 42
 2d4:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
 2d6:	84 e3       	ldi	r24, 0x34	; 52
 2d8:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
 2da:	81 e3       	ldi	r24, 0x31	; 49
 2dc:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
 2e2:	88 e3       	ldi	r24, 0x38	; 56
 2e4:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
 2e6:	85 e3       	ldi	r24, 0x35	; 53
 2e8:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
 2ea:	82 e3       	ldi	r24, 0x32	; 50
 2ec:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
 2ee:	83 e2       	ldi	r24, 0x23	; 35
 2f0:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
 2f2:	89 e3       	ldi	r24, 0x39	; 57
 2f4:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
 2f6:	86 e3       	ldi	r24, 0x36	; 54
 2f8:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
 2fa:	83 e3       	ldi	r24, 0x33	; 51
 2fc:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
 2fe:	84 e4       	ldi	r24, 0x44	; 68
 300:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
 302:	83 e4       	ldi	r24, 0x43	; 67
 304:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
 306:	82 e4       	ldi	r24, 0x42	; 66
 308:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
 30a:	81 e4       	ldi	r24, 0x41	; 65
 30c:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
 30e:	8a e7       	ldi	r24, 0x7A	; 122
 310:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
 312:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
 314:	08 95       	ret

00000316 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 316:	85 b1       	in	r24, 0x05	; 5
 318:	80 62       	ori	r24, 0x20	; 32
 31a:	85 b9       	out	0x05, r24	; 5
 31c:	00 00       	nop
 31e:	85 b1       	in	r24, 0x05	; 5
 320:	8f 7d       	andi	r24, 0xDF	; 223
 322:	85 b9       	out	0x05, r24	; 5
 324:	08 95       	ret

00000326 <lcd_write>:
 326:	cf 93       	push	r28
 328:	c8 2f       	mov	r28, r24
 32a:	66 23       	and	r22, r22
 32c:	31 f0       	breq	.+12     	; 0x33a <lcd_write+0x14>
 32e:	e2 e0       	ldi	r30, 0x02	; 2
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	80 81       	ld	r24, Z
 334:	80 64       	ori	r24, 0x40	; 64
 336:	80 83       	st	Z, r24
 338:	05 c0       	rjmp	.+10     	; 0x344 <lcd_write+0x1e>
 33a:	e2 e0       	ldi	r30, 0x02	; 2
 33c:	f1 e0       	ldi	r31, 0x01	; 1
 33e:	80 81       	ld	r24, Z
 340:	8f 7b       	andi	r24, 0xBF	; 191
 342:	80 83       	st	Z, r24
 344:	82 b1       	in	r24, 0x02	; 2
 346:	8e 7f       	andi	r24, 0xFE	; 254
 348:	82 b9       	out	0x02, r24	; 2
 34a:	8d b1       	in	r24, 0x0d	; 13
 34c:	80 62       	ori	r24, 0x20	; 32
 34e:	8d b9       	out	0x0d, r24	; 13
 350:	83 b3       	in	r24, 0x13	; 19
 352:	80 62       	ori	r24, 0x20	; 32
 354:	83 bb       	out	0x13, r24	; 19
 356:	8d b1       	in	r24, 0x0d	; 13
 358:	88 60       	ori	r24, 0x08	; 8
 35a:	8d b9       	out	0x0d, r24	; 13
 35c:	e1 e0       	ldi	r30, 0x01	; 1
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	80 81       	ld	r24, Z
 362:	88 60       	ori	r24, 0x08	; 8
 364:	80 83       	st	Z, r24
 366:	e2 e0       	ldi	r30, 0x02	; 2
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	80 81       	ld	r24, Z
 36c:	87 7f       	andi	r24, 0xF7	; 247
 36e:	80 83       	st	Z, r24
 370:	8e b1       	in	r24, 0x0e	; 14
 372:	87 7f       	andi	r24, 0xF7	; 247
 374:	8e b9       	out	0x0e, r24	; 14
 376:	84 b3       	in	r24, 0x14	; 20
 378:	8f 7d       	andi	r24, 0xDF	; 223
 37a:	84 bb       	out	0x14, r24	; 20
 37c:	8e b1       	in	r24, 0x0e	; 14
 37e:	8f 7d       	andi	r24, 0xDF	; 223
 380:	8e b9       	out	0x0e, r24	; 14
 382:	cc 23       	and	r28, r28
 384:	1c f4       	brge	.+6      	; 0x38c <lcd_write+0x66>
 386:	80 81       	ld	r24, Z
 388:	88 60       	ori	r24, 0x08	; 8
 38a:	80 83       	st	Z, r24
 38c:	c6 ff       	sbrs	r28, 6
 38e:	03 c0       	rjmp	.+6      	; 0x396 <lcd_write+0x70>
 390:	8e b1       	in	r24, 0x0e	; 14
 392:	88 60       	ori	r24, 0x08	; 8
 394:	8e b9       	out	0x0e, r24	; 14
 396:	c5 ff       	sbrs	r28, 5
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <lcd_write+0x7a>
 39a:	84 b3       	in	r24, 0x14	; 20
 39c:	80 62       	ori	r24, 0x20	; 32
 39e:	84 bb       	out	0x14, r24	; 20
 3a0:	c4 ff       	sbrs	r28, 4
 3a2:	03 c0       	rjmp	.+6      	; 0x3aa <lcd_write+0x84>
 3a4:	8e b1       	in	r24, 0x0e	; 14
 3a6:	80 62       	ori	r24, 0x20	; 32
 3a8:	8e b9       	out	0x0e, r24	; 14
 3aa:	b5 df       	rcall	.-150    	; 0x316 <toggle_e>
 3ac:	e2 e0       	ldi	r30, 0x02	; 2
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	80 81       	ld	r24, Z
 3b2:	87 7f       	andi	r24, 0xF7	; 247
 3b4:	80 83       	st	Z, r24
 3b6:	8e b1       	in	r24, 0x0e	; 14
 3b8:	87 7f       	andi	r24, 0xF7	; 247
 3ba:	8e b9       	out	0x0e, r24	; 14
 3bc:	84 b3       	in	r24, 0x14	; 20
 3be:	8f 7d       	andi	r24, 0xDF	; 223
 3c0:	84 bb       	out	0x14, r24	; 20
 3c2:	8e b1       	in	r24, 0x0e	; 14
 3c4:	8f 7d       	andi	r24, 0xDF	; 223
 3c6:	8e b9       	out	0x0e, r24	; 14
 3c8:	c3 ff       	sbrs	r28, 3
 3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <lcd_write+0xac>
 3cc:	80 81       	ld	r24, Z
 3ce:	88 60       	ori	r24, 0x08	; 8
 3d0:	80 83       	st	Z, r24
 3d2:	c2 ff       	sbrs	r28, 2
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <lcd_write+0xb6>
 3d6:	8e b1       	in	r24, 0x0e	; 14
 3d8:	88 60       	ori	r24, 0x08	; 8
 3da:	8e b9       	out	0x0e, r24	; 14
 3dc:	c1 ff       	sbrs	r28, 1
 3de:	03 c0       	rjmp	.+6      	; 0x3e6 <lcd_write+0xc0>
 3e0:	84 b3       	in	r24, 0x14	; 20
 3e2:	80 62       	ori	r24, 0x20	; 32
 3e4:	84 bb       	out	0x14, r24	; 20
 3e6:	c0 ff       	sbrs	r28, 0
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <lcd_write+0xca>
 3ea:	8e b1       	in	r24, 0x0e	; 14
 3ec:	80 62       	ori	r24, 0x20	; 32
 3ee:	8e b9       	out	0x0e, r24	; 14
 3f0:	92 df       	rcall	.-220    	; 0x316 <toggle_e>
 3f2:	8e b1       	in	r24, 0x0e	; 14
 3f4:	80 62       	ori	r24, 0x20	; 32
 3f6:	8e b9       	out	0x0e, r24	; 14
 3f8:	84 b3       	in	r24, 0x14	; 20
 3fa:	80 62       	ori	r24, 0x20	; 32
 3fc:	84 bb       	out	0x14, r24	; 20
 3fe:	8e b1       	in	r24, 0x0e	; 14
 400:	88 60       	ori	r24, 0x08	; 8
 402:	8e b9       	out	0x0e, r24	; 14
 404:	e2 e0       	ldi	r30, 0x02	; 2
 406:	f1 e0       	ldi	r31, 0x01	; 1
 408:	80 81       	ld	r24, Z
 40a:	88 60       	ori	r24, 0x08	; 8
 40c:	80 83       	st	Z, r24
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <lcd_read>:
 412:	88 23       	and	r24, r24
 414:	31 f0       	breq	.+12     	; 0x422 <lcd_read+0x10>
 416:	e2 e0       	ldi	r30, 0x02	; 2
 418:	f1 e0       	ldi	r31, 0x01	; 1
 41a:	80 81       	ld	r24, Z
 41c:	80 64       	ori	r24, 0x40	; 64
 41e:	80 83       	st	Z, r24
 420:	05 c0       	rjmp	.+10     	; 0x42c <lcd_read+0x1a>
 422:	e2 e0       	ldi	r30, 0x02	; 2
 424:	f1 e0       	ldi	r31, 0x01	; 1
 426:	80 81       	ld	r24, Z
 428:	8f 7b       	andi	r24, 0xBF	; 191
 42a:	80 83       	st	Z, r24
 42c:	82 b1       	in	r24, 0x02	; 2
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	82 b9       	out	0x02, r24	; 2
 432:	8d b1       	in	r24, 0x0d	; 13
 434:	8f 7d       	andi	r24, 0xDF	; 223
 436:	8d b9       	out	0x0d, r24	; 13
 438:	83 b3       	in	r24, 0x13	; 19
 43a:	8f 7d       	andi	r24, 0xDF	; 223
 43c:	83 bb       	out	0x13, r24	; 19
 43e:	8d b1       	in	r24, 0x0d	; 13
 440:	87 7f       	andi	r24, 0xF7	; 247
 442:	8d b9       	out	0x0d, r24	; 13
 444:	e1 e0       	ldi	r30, 0x01	; 1
 446:	f1 e0       	ldi	r31, 0x01	; 1
 448:	80 81       	ld	r24, Z
 44a:	87 7f       	andi	r24, 0xF7	; 247
 44c:	80 83       	st	Z, r24
 44e:	85 b1       	in	r24, 0x05	; 5
 450:	80 62       	ori	r24, 0x20	; 32
 452:	85 b9       	out	0x05, r24	; 5
 454:	00 00       	nop
 456:	65 99       	sbic	0x0c, 5	; 12
 458:	02 c0       	rjmp	.+4      	; 0x45e <lcd_read+0x4c>
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	01 c0       	rjmp	.+2      	; 0x460 <lcd_read+0x4e>
 45e:	80 e1       	ldi	r24, 0x10	; 16
 460:	95 99       	sbic	0x12, 5	; 18
 462:	80 62       	ori	r24, 0x20	; 32
 464:	63 99       	sbic	0x0c, 3	; 12
 466:	80 64       	ori	r24, 0x40	; 64
 468:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 46c:	93 fd       	sbrc	r25, 3
 46e:	80 68       	ori	r24, 0x80	; 128
 470:	95 b1       	in	r25, 0x05	; 5
 472:	9f 7d       	andi	r25, 0xDF	; 223
 474:	95 b9       	out	0x05, r25	; 5
 476:	00 00       	nop
 478:	95 b1       	in	r25, 0x05	; 5
 47a:	90 62       	ori	r25, 0x20	; 32
 47c:	95 b9       	out	0x05, r25	; 5
 47e:	00 00       	nop
 480:	65 99       	sbic	0x0c, 5	; 12
 482:	81 60       	ori	r24, 0x01	; 1
 484:	95 99       	sbic	0x12, 5	; 18
 486:	82 60       	ori	r24, 0x02	; 2
 488:	63 99       	sbic	0x0c, 3	; 12
 48a:	84 60       	ori	r24, 0x04	; 4
 48c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 490:	93 fd       	sbrc	r25, 3
 492:	88 60       	ori	r24, 0x08	; 8
 494:	95 b1       	in	r25, 0x05	; 5
 496:	9f 7d       	andi	r25, 0xDF	; 223
 498:	95 b9       	out	0x05, r25	; 5
 49a:	08 95       	ret

0000049c <lcd_waitbusy>:
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	b9 df       	rcall	.-142    	; 0x412 <lcd_read>
 4a0:	88 23       	and	r24, r24
 4a2:	e4 f3       	brlt	.-8      	; 0x49c <lcd_waitbusy>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <lcd_waitbusy+0xa>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <lcd_waitbusy+0xc>
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	b3 cf       	rjmp	.-154    	; 0x412 <lcd_read>
 4ac:	08 95       	ret

000004ae <lcd_command>:
 4ae:	cf 93       	push	r28
 4b0:	c8 2f       	mov	r28, r24
 4b2:	f4 df       	rcall	.-24     	; 0x49c <lcd_waitbusy>
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	8c 2f       	mov	r24, r28
 4b8:	36 df       	rcall	.-404    	; 0x326 <lcd_write>
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret

000004be <lcd_gotoxy>:
 4be:	61 11       	cpse	r22, r1
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <lcd_gotoxy+0xa>
 4c2:	80 58       	subi	r24, 0x80	; 128
 4c4:	f4 cf       	rjmp	.-24     	; 0x4ae <lcd_command>
 4c6:	08 95       	ret
 4c8:	80 54       	subi	r24, 0x40	; 64
 4ca:	f1 cf       	rjmp	.-30     	; 0x4ae <lcd_command>
 4cc:	08 95       	ret

000004ce <lcd_clrscr>:
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	ee cf       	rjmp	.-36     	; 0x4ae <lcd_command>
 4d2:	08 95       	ret

000004d4 <lcd_putc>:
 4d4:	cf 93       	push	r28
 4d6:	c8 2f       	mov	r28, r24
 4d8:	e1 df       	rcall	.-62     	; 0x49c <lcd_waitbusy>
 4da:	ca 30       	cpi	r28, 0x0A	; 10
 4dc:	41 f4       	brne	.+16     	; 0x4ee <lcd_putc+0x1a>
 4de:	80 34       	cpi	r24, 0x40	; 64
 4e0:	10 f4       	brcc	.+4      	; 0x4e6 <lcd_putc+0x12>
 4e2:	80 e4       	ldi	r24, 0x40	; 64
 4e4:	01 c0       	rjmp	.+2      	; 0x4e8 <lcd_putc+0x14>
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	80 58       	subi	r24, 0x80	; 128
 4ea:	e1 df       	rcall	.-62     	; 0x4ae <lcd_command>
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <lcd_putc+0x20>
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	8c 2f       	mov	r24, r28
 4f2:	19 df       	rcall	.-462    	; 0x326 <lcd_write>
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <lcd_puts>:
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	fc 01       	movw	r30, r24
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <lcd_puts+0xc>
 500:	e9 df       	rcall	.-46     	; 0x4d4 <lcd_putc>
 502:	fe 01       	movw	r30, r28
 504:	ef 01       	movw	r28, r30
 506:	21 96       	adiw	r28, 0x01	; 1
 508:	80 81       	ld	r24, Z
 50a:	81 11       	cpse	r24, r1
 50c:	f9 cf       	rjmp	.-14     	; 0x500 <lcd_puts+0x8>
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 514:	cf 93       	push	r28
 516:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 518:	e1 e0       	ldi	r30, 0x01	; 1
 51a:	f1 e0       	ldi	r31, 0x01	; 1
 51c:	80 81       	ld	r24, Z
 51e:	80 64       	ori	r24, 0x40	; 64
 520:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 522:	81 b1       	in	r24, 0x01	; 1
 524:	81 60       	ori	r24, 0x01	; 1
 526:	81 b9       	out	0x01, r24	; 1
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 528:	84 b1       	in	r24, 0x04	; 4
 52a:	80 62       	ori	r24, 0x20	; 32
 52c:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 52e:	8d b1       	in	r24, 0x0d	; 13
 530:	80 62       	ori	r24, 0x20	; 32
 532:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 534:	83 b3       	in	r24, 0x13	; 19
 536:	80 62       	ori	r24, 0x20	; 32
 538:	83 bb       	out	0x13, r24	; 19
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 53a:	8d b1       	in	r24, 0x0d	; 13
 53c:	88 60       	ori	r24, 0x08	; 8
 53e:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 540:	80 81       	ld	r24, Z
 542:	88 60       	ori	r24, 0x08	; 8
 544:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 546:	8f e9       	ldi	r24, 0x9F	; 159
 548:	9f e0       	ldi	r25, 0x0F	; 15
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <lcd_init+0x36>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <lcd_init+0x3c>
 550:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 552:	84 b3       	in	r24, 0x14	; 20
 554:	80 62       	ori	r24, 0x20	; 32
 556:	84 bb       	out	0x14, r24	; 20
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 558:	8e b1       	in	r24, 0x0e	; 14
 55a:	80 62       	ori	r24, 0x20	; 32
 55c:	8e b9       	out	0x0e, r24	; 14
    lcd_e_toggle();
 55e:	db de       	rcall	.-586    	; 0x316 <toggle_e>
 560:	81 ee       	ldi	r24, 0xE1	; 225
 562:	94 e0       	ldi	r25, 0x04	; 4
 564:	01 97       	sbiw	r24, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <lcd_init+0x50>
 568:	00 c0       	rjmp	.+0      	; 0x56a <lcd_init+0x56>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 56a:	00 00       	nop
 56c:	d4 de       	rcall	.-600    	; 0x316 <toggle_e>
 56e:	95 e1       	ldi	r25, 0x15	; 21
 570:	9a 95       	dec	r25
 572:	f1 f7       	brne	.-4      	; 0x570 <lcd_init+0x5c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 574:	00 00       	nop
 576:	cf de       	rcall	.-610    	; 0x316 <toggle_e>
 578:	85 e1       	ldi	r24, 0x15	; 21
 57a:	8a 95       	dec	r24
 57c:	f1 f7       	brne	.-4      	; 0x57a <lcd_init+0x66>
 57e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 580:	8e b1       	in	r24, 0x0e	; 14
 582:	8f 7d       	andi	r24, 0xDF	; 223
    lcd_e_toggle();
 584:	8e b9       	out	0x0e, r24	; 14
 586:	c7 de       	rcall	.-626    	; 0x316 <toggle_e>
 588:	95 e1       	ldi	r25, 0x15	; 21
 58a:	9a 95       	dec	r25
 58c:	f1 f7       	brne	.-4      	; 0x58a <lcd_init+0x76>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 58e:	00 00       	nop
 590:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 592:	8d df       	rcall	.-230    	; 0x4ae <lcd_command>
 594:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
 596:	8b df       	rcall	.-234    	; 0x4ae <lcd_command>
 598:	9a df       	rcall	.-204    	; 0x4ce <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 59a:	86 e0       	ldi	r24, 0x06	; 6
 59c:	88 df       	rcall	.-240    	; 0x4ae <lcd_command>
 59e:	8c 2f       	mov	r24, r28
    lcd_command(dispAttr);                  /* display/cursor control       */
 5a0:	86 df       	rcall	.-244    	; 0x4ae <lcd_command>
 5a2:	cf 91       	pop	r28
 5a4:	08 95       	ret

000005a6 <wait_ms>:
ISR(TIMER1_COMPA_vect) { tick10ms++; }

/* Wait-helper that lets the CPU run other code/ISRs */
static void wait_ms(uint16_t ms)
{
    uint32_t target = tick10ms + (ms / 10);
 5a6:	9c 01       	movw	r18, r24
 5a8:	ad ec       	ldi	r26, 0xCD	; 205
 5aa:	bc ec       	ldi	r27, 0xCC	; 204
 5ac:	7a d1       	rcall	.+756    	; 0x8a2 <__umulhisi3>
 5ae:	96 95       	lsr	r25
 5b0:	87 95       	ror	r24
 5b2:	96 95       	lsr	r25
 5b4:	87 95       	ror	r24
 5b6:	96 95       	lsr	r25
 5b8:	87 95       	ror	r24
 5ba:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <__data_end>
 5be:	50 91 59 02 	lds	r21, 0x0259	; 0x800259 <__data_end+0x1>
 5c2:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <__data_end+0x2>
 5c6:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <__data_end+0x3>
 5ca:	48 0f       	add	r20, r24
 5cc:	59 1f       	adc	r21, r25
 5ce:	61 1d       	adc	r22, r1
 5d0:	71 1d       	adc	r23, r1
    while (tick10ms < target)      /* idle-loop but IRQs keep running */
 5d2:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__data_end>
 5d6:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <__data_end+0x1>
 5da:	a0 91 5a 02 	lds	r26, 0x025A	; 0x80025a <__data_end+0x2>
 5de:	b0 91 5b 02 	lds	r27, 0x025B	; 0x80025b <__data_end+0x3>
 5e2:	84 17       	cp	r24, r20
 5e4:	95 07       	cpc	r25, r21
 5e6:	a6 07       	cpc	r26, r22
 5e8:	b7 07       	cpc	r27, r23
 5ea:	98 f3       	brcs	.-26     	; 0x5d2 <wait_ms+0x2c>
    ;                          /* you could power-save here later */
}
 5ec:	08 95       	ret

000005ee <spi_master_init>:

/* ---------------- SPI master helpers ---------------- */
static void spi_master_init(void)
{
    /* SCK�=�PB1, MOSI�=�PB2, SS�=�PB0  ? outputs; MISO�PB3 input */
    DDRB |= (1<<PB1) | (1<<PB2) | (1<<PB0);
 5ee:	84 b1       	in	r24, 0x04	; 4
 5f0:	87 60       	ori	r24, 0x07	; 7
 5f2:	84 b9       	out	0x04, r24	; 4
    DDRB &= ~(1<<PB3);
 5f4:	84 b1       	in	r24, 0x04	; 4
 5f6:	87 7f       	andi	r24, 0xF7	; 247
 5f8:	84 b9       	out	0x04, r24	; 4
    /* Keep SS high (idle) */
    PORTB |= (1<<PB0);
 5fa:	85 b1       	in	r24, 0x05	; 5
 5fc:	81 60       	ori	r24, 0x01	; 1
 5fe:	85 b9       	out	0x05, r24	; 5
    /* Enable SPI, Master, f_osc/16 (1�MHz at 16�MHz clock) */
    SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 600:	81 e5       	ldi	r24, 0x51	; 81
 602:	8c bd       	out	0x2c, r24	; 44
 604:	08 95       	ret

00000606 <spi_tx>:
}

static uint8_t spi_tx(uint8_t data)
{
    SPDR = data;
 606:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1<<SPIF)));
 608:	0d b4       	in	r0, 0x2d	; 45
 60a:	07 fe       	sbrs	r0, 7
 60c:	fd cf       	rjmp	.-6      	; 0x608 <spi_tx+0x2>
    return SPDR;          /* discard slave reply for now */
 60e:	8e b5       	in	r24, 0x2e	; 46
}
 610:	08 95       	ret

00000612 <spi_cmd>:

static void spi_cmd(uint8_t cmd)
{
    PORTB &= ~(1<<PB0);   /* SS low  */
 612:	95 b1       	in	r25, 0x05	; 5
 614:	9e 7f       	andi	r25, 0xFE	; 254
 616:	95 b9       	out	0x05, r25	; 5
    spi_tx(cmd);
 618:	f6 df       	rcall	.-20     	; 0x606 <spi_tx>
    PORTB |=  (1<<PB0);   /* SS high */
 61a:	85 b1       	in	r24, 0x05	; 5
 61c:	81 60       	ori	r24, 0x01	; 1
 61e:	85 b9       	out	0x05, r24	; 5
 620:	08 95       	ret

00000622 <is_digit>:
}

/* ---------------- small helpers ---------------- */
static uint8_t is_digit(char c){ return (c>='0' && c<='9'); }
 622:	90 ed       	ldi	r25, 0xD0	; 208
 624:	98 0f       	add	r25, r24
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	9a 30       	cpi	r25, 0x0A	; 10
 62a:	08 f0       	brcs	.+2      	; 0x62e <is_digit+0xc>
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	08 95       	ret

00000630 <led_movement_on>:
static void led_movement_on (void){ spi_cmd(CMD_MOVEMENT_LED_ON); }
 630:	80 e1       	ldi	r24, 0x10	; 16
 632:	ef cf       	rjmp	.-34     	; 0x612 <spi_cmd>
 634:	08 95       	ret

00000636 <led_movement_off>:
static void led_movement_off(void){ spi_cmd(CMD_MOVEMENT_LED_OFF);} 
 636:	81 e1       	ldi	r24, 0x11	; 17
 638:	ec cf       	rjmp	.-40     	; 0x612 <spi_cmd>
 63a:	08 95       	ret

0000063c <led_door_on>:
static void led_door_on      (void){ spi_cmd(CMD_DOOR_LED_ON);    }
 63c:	82 e1       	ldi	r24, 0x12	; 18
 63e:	e9 cf       	rjmp	.-46     	; 0x612 <spi_cmd>
 640:	08 95       	ret

00000642 <led_door_off>:
static void led_door_off     (void){ spi_cmd(CMD_DOOR_LED_OFF);   }
 642:	83 e1       	ldi	r24, 0x13	; 19
 644:	e6 cf       	rjmp	.-52     	; 0x612 <spi_cmd>
 646:	08 95       	ret

00000648 <__vector_5>:
#include "keypad.h"
#include "protocol.h"

/* emergency flag triggered by button */
volatile uint8_t emg_flag = 0;
ISR(INT4_vect) { emg_flag = 1; }
 648:	1f 92       	push	r1
 64a:	0f 92       	push	r0
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	0f 92       	push	r0
 650:	11 24       	eor	r1, r1
 652:	8f 93       	push	r24
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <emg_flag>
 65a:	8f 91       	pop	r24
 65c:	0f 90       	pop	r0
 65e:	0f be       	out	0x3f, r0	; 63
 660:	0f 90       	pop	r0
 662:	1f 90       	pop	r1
 664:	18 95       	reti

00000666 <__vector_17>:
    
/* =========== 10-ms system tick (Timer-1 CTC) =========== */
volatile uint32_t tick10ms = 0;

ISR(TIMER1_COMPA_vect) { tick10ms++; }
 666:	1f 92       	push	r1
 668:	0f 92       	push	r0
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	8f 93       	push	r24
 672:	9f 93       	push	r25
 674:	af 93       	push	r26
 676:	bf 93       	push	r27
 678:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__data_end>
 67c:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <__data_end+0x1>
 680:	a0 91 5a 02 	lds	r26, 0x025A	; 0x80025a <__data_end+0x2>
 684:	b0 91 5b 02 	lds	r27, 0x025B	; 0x80025b <__data_end+0x3>
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	a1 1d       	adc	r26, r1
 68c:	b1 1d       	adc	r27, r1
 68e:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
 692:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__data_end+0x1>
 696:	a0 93 5a 02 	sts	0x025A, r26	; 0x80025a <__data_end+0x2>
 69a:	b0 93 5b 02 	sts	0x025B, r27	; 0x80025b <__data_end+0x3>
 69e:	bf 91       	pop	r27
 6a0:	af 91       	pop	r26
 6a2:	9f 91       	pop	r25
 6a4:	8f 91       	pop	r24
 6a6:	0f 90       	pop	r0
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	0f 90       	pop	r0
 6ac:	1f 90       	pop	r1
 6ae:	18 95       	reti

000006b0 <main>:
#define FLOOR_TIME_SEC 250

enum state_t { ST_IDLE, ST_MOVING, ST_DOOR, ST_EMERGENCY };
    
int main(void)
{
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	cd b7       	in	r28, 0x3d	; 61
 6b6:	de b7       	in	r29, 0x3e	; 62
 6b8:	61 97       	sbiw	r28, 0x11	; 17
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	f8 94       	cli
 6be:	de bf       	out	0x3e, r29	; 62
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	cd bf       	out	0x3d, r28	; 61
    /* --- emergency button init --- */
    DDRE  &= ~_BV(EMG_PIN);      /* make PE4 input            */
 6c4:	8d b1       	in	r24, 0x0d	; 13
 6c6:	8f 7e       	andi	r24, 0xEF	; 239
 6c8:	8d b9       	out	0x0d, r24	; 13
    PORTE |=  _BV(EMG_PIN);      /* enable internal pull-up   */
 6ca:	8e b1       	in	r24, 0x0e	; 14
 6cc:	80 61       	ori	r24, 0x10	; 16
 6ce:	8e b9       	out	0x0e, r24	; 14

    EICRB |=  _BV(ISC41);        /* INT4: falling edge        */
 6d0:	ea e6       	ldi	r30, 0x6A	; 106
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	80 81       	ld	r24, Z
 6d6:	82 60       	ori	r24, 0x02	; 2
 6d8:	80 83       	st	Z, r24
    EIMSK |=  _BV(INT4);         /* enable INT4               */
 6da:	8d b3       	in	r24, 0x1d	; 29
 6dc:	80 61       	ori	r24, 0x10	; 16
 6de:	8d bb       	out	0x1d, r24	; 29
    sei();                       /* << enable global IRQs     */
 6e0:	78 94       	sei
    // operation
    uint8_t  current_floor = 0;
    uint8_t  target_floor  = 0;
    enum state_t state = ST_IDLE;

    KEYPAD_Init();
 6e2:	b0 dd       	rcall	.-1184   	; 0x244 <KEYPAD_Init>
    spi_master_init();
 6e4:	84 df       	rcall	.-248    	; 0x5ee <spi_master_init>
 6e6:	8d e0       	ldi	r24, 0x0D	; 13

    /* --- 10 ms tick --- */
    TCCR1B = _BV(WGM12) | _BV(CS12) | _BV(CS10);          /* CTC, clk/1024 */
 6e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
 6ec:	8b e9       	ldi	r24, 0x9B	; 155
    OCR1A  = (F_CPU / 1024 / 100) - 1;                    /* 10 ms period */
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 6f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 6f8:	82 e0       	ldi	r24, 0x02	; 2
    TIMSK1 = _BV(OCIE1A);
 6fa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>

    lcd_init(LCD_DISP_ON);
 6fe:	8c e0       	ldi	r24, 0x0C	; 12
 700:	09 df       	rcall	.-494    	; 0x514 <lcd_init>
    lcd_clrscr();
 702:	e5 de       	rcall	.-566    	; 0x4ce <lcd_clrscr>
 704:	e1 2c       	mov	r14, r1
    sei();                       /* << enable global IRQs     */
    
    // operation
    uint8_t  current_floor = 0;
    uint8_t  target_floor  = 0;
    enum state_t state = ST_IDLE;
 706:	00 e0       	ldi	r16, 0x00	; 0
    EIMSK |=  _BV(INT4);         /* enable INT4               */
    sei();                       /* << enable global IRQs     */
    
    // operation
    uint8_t  current_floor = 0;
    uint8_t  target_floor  = 0;
 708:	10 e0       	ldi	r17, 0x00	; 0
    EICRB |=  _BV(ISC41);        /* INT4: falling edge        */
    EIMSK |=  _BV(INT4);         /* enable INT4               */
    sei();                       /* << enable global IRQs     */
    
    // operation
    uint8_t  current_floor = 0;
 70a:	03 c0       	rjmp	.+6      	; 0x712 <main+0x62>
 70c:	68 94       	set

            /* decide next state */
            if (emg_flag)
            state = ST_EMERGENCY;
            else
            state = ST_DOOR;
 70e:	ee 24       	eor	r14, r14
 710:	e1 f8       	bld	r14, 1
 712:	81 e0       	ldi	r24, 0x01	; 1
    lcd_init(LCD_DISP_ON);
    lcd_clrscr();

    while (1)
    {
        switch(state)
 714:	e8 16       	cp	r14, r24
 716:	09 f4       	brne	.+2      	; 0x71a <main+0x6a>
 718:	3e c0       	rjmp	.+124    	; 0x796 <main+0xe6>
 71a:	e8 16       	cp	r14, r24
 71c:	48 f0       	brcs	.+18     	; 0x730 <main+0x80>
 71e:	92 e0       	ldi	r25, 0x02	; 2
 720:	e9 16       	cp	r14, r25
 722:	09 f4       	brne	.+2      	; 0x726 <main+0x76>
 724:	73 c0       	rjmp	.+230    	; 0x80c <main+0x15c>
 726:	83 e0       	ldi	r24, 0x03	; 3
 728:	e8 16       	cp	r14, r24
 72a:	09 f4       	brne	.+2      	; 0x72e <main+0x7e>
 72c:	81 c0       	rjmp	.+258    	; 0x830 <main+0x180>
 72e:	f1 cf       	rjmp	.-30     	; 0x712 <main+0x62>
        {
        /* ------------------------------------------------ IDLE */
        case ST_IDLE:
            lcd_clrscr();
 730:	ce de       	rcall	.-612    	; 0x4ce <lcd_clrscr>
            lcd_puts("Choose floor:");
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	92 e0       	ldi	r25, 0x02	; 2
 736:	e0 de       	rcall	.-576    	; 0x4f8 <lcd_puts>

            /* Wait first digit */
            char d1;
            do{ d1 = KEYPAD_GetKey(); } while(!is_digit(d1));
 738:	b7 dd       	rcall	.-1170   	; 0x2a8 <KEYPAD_GetKey>
 73a:	f8 2e       	mov	r15, r24
 73c:	72 df       	rcall	.-284    	; 0x622 <is_digit>
 73e:	88 23       	and	r24, r24
            lcd_gotoxy(0,1); lcd_putc(d1);
 740:	d9 f3       	breq	.-10     	; 0x738 <main+0x88>
 742:	61 e0       	ldi	r22, 0x01	; 1
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	bb de       	rcall	.-650    	; 0x4be <lcd_gotoxy>
 748:	8f 2d       	mov	r24, r15
 74a:	c4 de       	rcall	.-632    	; 0x4d4 <lcd_putc>

            /* Wait second digit */
            char d2;
            do{ d2 = KEYPAD_GetKey(); } while(!is_digit(d2));
 74c:	ad dd       	rcall	.-1190   	; 0x2a8 <KEYPAD_GetKey>
 74e:	08 2f       	mov	r16, r24
 750:	68 df       	rcall	.-304    	; 0x622 <is_digit>
 752:	88 23       	and	r24, r24
 754:	d9 f3       	breq	.-10     	; 0x74c <main+0x9c>
 756:	80 2f       	mov	r24, r16
 758:	bd de       	rcall	.-646    	; 0x4d4 <lcd_putc>
            lcd_putc(d2);
 75a:	8f 2d       	mov	r24, r15
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	c0 97       	sbiw	r24, 0x30	; 48

            target_floor = (d1 - '0')*10 + (d2 - '0');
 760:	88 0f       	add	r24, r24
 762:	98 2f       	mov	r25, r24
 764:	99 0f       	add	r25, r25
 766:	99 0f       	add	r25, r25
 768:	89 0f       	add	r24, r25
 76a:	08 0f       	add	r16, r24
 76c:	00 53       	subi	r16, 0x30	; 48

            if(target_floor == current_floor)
 76e:	10 17       	cp	r17, r16
 770:	69 f0       	breq	.+26     	; 0x78c <main+0xdc>
                /* Fault: blink movement LED 3� and stay in IDLE */
                for(uint8_t i=0;i<3;i++){ led_movement_on(); wait_ms(500); led_movement_off(); wait_ms(500);}
            }
            else
            {
                state = ST_MOVING;
 772:	ee 24       	eor	r14, r14
 774:	e3 94       	inc	r14
 776:	cd cf       	rjmp	.-102    	; 0x712 <main+0x62>
            target_floor = (d1 - '0')*10 + (d2 - '0');

            if(target_floor == current_floor)
            {
                /* Fault: blink movement LED 3� and stay in IDLE */
                for(uint8_t i=0;i<3;i++){ led_movement_on(); wait_ms(500); led_movement_off(); wait_ms(500);}
 778:	5b df       	rcall	.-330    	; 0x630 <led_movement_on>
 77a:	84 ef       	ldi	r24, 0xF4	; 244
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	13 df       	rcall	.-474    	; 0x5a6 <wait_ms>
 780:	5a df       	rcall	.-332    	; 0x636 <led_movement_off>
 782:	84 ef       	ldi	r24, 0xF4	; 244
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	0f df       	rcall	.-482    	; 0x5a6 <wait_ms>
 788:	f3 94       	inc	r15
 78a:	01 c0       	rjmp	.+2      	; 0x78e <main+0xde>
 78c:	f1 2c       	mov	r15, r1
 78e:	92 e0       	ldi	r25, 0x02	; 2
 790:	9f 15       	cp	r25, r15
 792:	90 f7       	brcc	.-28     	; 0x778 <main+0xc8>
 794:	be cf       	rjmp	.-132    	; 0x712 <main+0x62>
 796:	4c df       	rcall	.-360    	; 0x630 <led_movement_on>
 798:	10 17       	cp	r17, r16
 79a:	18 f4       	brcc	.+6      	; 0x7a2 <main+0xf2>
            }
            break;

        /* ------------------------------------------------ MOVING */
        case ST_MOVING:
            led_movement_on();
 79c:	dd 24       	eor	r13, r13
 79e:	d3 94       	inc	r13
            {
                int8_t dir = (target_floor > current_floor) ? 1 : -1;
 7a0:	1e c0       	rjmp	.+60     	; 0x7de <main+0x12e>
 7a2:	dd 24       	eor	r13, r13
 7a4:	da 94       	dec	r13
 7a6:	1b c0       	rjmp	.+54     	; 0x7de <main+0x12e>
 7a8:	1d 0d       	add	r17, r13
 7aa:	61 e0       	ldi	r22, 0x01	; 1

                /* move floor-by-floor until target OR emergency */
                while (current_floor != target_floor && !emg_flag)
                {
                    current_floor += dir;
 7ac:	80 e0       	ldi	r24, 0x00	; 0

                    /* update LCD second line */
                    lcd_gotoxy(0,1);
 7ae:	87 de       	rcall	.-754    	; 0x4be <lcd_gotoxy>
 7b0:	1f 92       	push	r1
 7b2:	1f 93       	push	r17
                    char line[17];
                    sprintf(line, "Floor %02u", current_floor); /* always 00‥99 */
 7b4:	8e e0       	ldi	r24, 0x0E	; 14
 7b6:	92 e0       	ldi	r25, 0x02	; 2
 7b8:	9f 93       	push	r25
 7ba:	8f 93       	push	r24
 7bc:	ce 01       	movw	r24, r28
 7be:	01 96       	adiw	r24, 0x01	; 1
 7c0:	7c 01       	movw	r14, r24
 7c2:	9f 93       	push	r25
 7c4:	8f 93       	push	r24
 7c6:	7c d0       	rcall	.+248    	; 0x8c0 <sprintf>
 7c8:	c7 01       	movw	r24, r14
 7ca:	96 de       	rcall	.-724    	; 0x4f8 <lcd_puts>
 7cc:	8a ef       	ldi	r24, 0xFA	; 250
                    lcd_puts(line);
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	ea de       	rcall	.-556    	; 0x5a6 <wait_ms>
                    
                    wait_ms(FLOOR_TIME_SEC);   /* still interrupt-friendly */
 7d2:	0f 90       	pop	r0
 7d4:	0f 90       	pop	r0
 7d6:	0f 90       	pop	r0
 7d8:	0f 90       	pop	r0
 7da:	0f 90       	pop	r0
 7dc:	0f 90       	pop	r0
 7de:	10 17       	cp	r17, r16
 7e0:	21 f0       	breq	.+8      	; 0x7ea <main+0x13a>
 7e2:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <emg_flag>
            led_movement_on();
            {
                int8_t dir = (target_floor > current_floor) ? 1 : -1;

                /* move floor-by-floor until target OR emergency */
                while (current_floor != target_floor && !emg_flag)
 7e6:	88 23       	and	r24, r24
 7e8:	f9 f2       	breq	.-66     	; 0x7a8 <main+0xf8>
 7ea:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <emg_flag>
                    lcd_puts(line);
                    
                    wait_ms(FLOOR_TIME_SEC);   /* still interrupt-friendly */
                }
            }
            if(emg_flag == 0){spi_cmd(CMD_DING);}   /* play floor arrival chime on UNO */
 7ee:	81 11       	cpse	r24, r1
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <main+0x146>
 7f2:	85 e2       	ldi	r24, 0x25	; 37
 7f4:	0e df       	rcall	.-484    	; 0x612 <spi_cmd>
            
            led_movement_off();
 7f6:	1f df       	rcall	.-450    	; 0x636 <led_movement_off>

            /* decide next state */
            if (emg_flag)
 7f8:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <emg_flag>
 7fc:	88 23       	and	r24, r24
 7fe:	09 f4       	brne	.+2      	; 0x802 <main+0x152>
            state = ST_EMERGENCY;
 800:	85 cf       	rjmp	.-246    	; 0x70c <main+0x5c>
 802:	0f 2e       	mov	r0, r31
 804:	f3 e0       	ldi	r31, 0x03	; 3
 806:	ef 2e       	mov	r14, r31
            break;


        /* ------------------------------------------------ DOOR OPEN/CLOSE */
        case ST_DOOR:
            led_door_on();
 808:	f0 2d       	mov	r31, r0
            lcd_clrscr();
 80a:	83 cf       	rjmp	.-250    	; 0x712 <main+0x62>
 80c:	17 df       	rcall	.-466    	; 0x63c <led_door_on>
            lcd_puts("Door opening...");
 80e:	5f de       	rcall	.-834    	; 0x4ce <lcd_clrscr>
 810:	89 e1       	ldi	r24, 0x19	; 25
 812:	92 e0       	ldi	r25, 0x02	; 2
            wait_ms(5000);
 814:	71 de       	rcall	.-798    	; 0x4f8 <lcd_puts>
 816:	88 e8       	ldi	r24, 0x88	; 136
 818:	93 e1       	ldi	r25, 0x13	; 19
            led_door_off();
 81a:	c5 de       	rcall	.-630    	; 0x5a6 <wait_ms>
 81c:	12 df       	rcall	.-476    	; 0x642 <led_door_off>
            lcd_clrscr();
 81e:	57 de       	rcall	.-850    	; 0x4ce <lcd_clrscr>
 820:	89 e2       	ldi	r24, 0x29	; 41
            lcd_puts("Door closed");
 822:	92 e0       	ldi	r25, 0x02	; 2
 824:	69 de       	rcall	.-814    	; 0x4f8 <lcd_puts>
 826:	8c ed       	ldi	r24, 0xDC	; 220
            wait_ms(1500);
 828:	95 e0       	ldi	r25, 0x05	; 5
 82a:	bd de       	rcall	.-646    	; 0x5a6 <wait_ms>
 82c:	e1 2c       	mov	r14, r1
            state = ST_IDLE;
 82e:	71 cf       	rjmp	.-286    	; 0x712 <main+0x62>
            break;
            
    /* ------------------------------------------------ EMERGENCY  (improved level) */
        case ST_EMERGENCY:
            emg_flag = 0;                     /* allow re-trigger later      */
 830:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <emg_flag>
            lcd_clrscr();
            lcd_puts("!!! EMERGENCY !!!");
 834:	4c de       	rcall	.-872    	; 0x4ce <lcd_clrscr>
 836:	85 e3       	ldi	r24, 0x35	; 53
 838:	92 e0       	ldi	r25, 0x02	; 2
            
            /* play melody once on UNO */
            spi_cmd(CMD_BUZZER_PLAY_ONESHOT);
 83a:	5e de       	rcall	.-836    	; 0x4f8 <lcd_puts>
 83c:	80 e2       	ldi	r24, 0x20	; 32
            
            /* movement LED blinks 3× */
            for (uint8_t i = 0; i < 3; i++) {
 83e:	e9 de       	rcall	.-558    	; 0x612 <spi_cmd>
                led_movement_on();  wait_ms(300);
 840:	f1 2c       	mov	r15, r1
 842:	09 c0       	rjmp	.+18     	; 0x856 <main+0x1a6>
 844:	f5 de       	rcall	.-534    	; 0x630 <led_movement_on>
 846:	8c e2       	ldi	r24, 0x2C	; 44
 848:	91 e0       	ldi	r25, 0x01	; 1
                led_movement_off(); wait_ms(300);
 84a:	ad de       	rcall	.-678    	; 0x5a6 <wait_ms>
 84c:	f4 de       	rcall	.-536    	; 0x636 <led_movement_off>
 84e:	8c e2       	ldi	r24, 0x2C	; 44
 850:	91 e0       	ldi	r25, 0x01	; 1
 852:	a9 de       	rcall	.-686    	; 0x5a6 <wait_ms>
 854:	f3 94       	inc	r15
            
            /* play melody once on UNO */
            spi_cmd(CMD_BUZZER_PLAY_ONESHOT);
            
            /* movement LED blinks 3× */
            for (uint8_t i = 0; i < 3; i++) {
 856:	92 e0       	ldi	r25, 0x02	; 2
 858:	9f 15       	cp	r25, r15
 85a:	a0 f7       	brcc	.-24     	; 0x844 <main+0x194>
 85c:	38 de       	rcall	.-912    	; 0x4ce <lcd_clrscr>
                led_movement_on();  wait_ms(300);
                led_movement_off(); wait_ms(300);
            }

            /* wait for user confirmation (#) to open the door */
            lcd_clrscr();
 85e:	87 e4       	ldi	r24, 0x47	; 71
 860:	92 e0       	ldi	r25, 0x02	; 2
            lcd_puts("Press # to open");
 862:	4a de       	rcall	.-876    	; 0x4f8 <lcd_puts>
 864:	21 dd       	rcall	.-1470   	; 0x2a8 <KEYPAD_GetKey>
 866:	83 32       	cpi	r24, 0x23	; 35
 868:	e9 f7       	brne	.-6      	; 0x864 <main+0x1b4>
            char key;
            do { key = KEYPAD_GetKey(); } while (key != '#');
 86a:	e8 de       	rcall	.-560    	; 0x63c <led_door_on>
 86c:	85 e2       	ldi	r24, 0x25	; 37
 86e:	d1 de       	rcall	.-606    	; 0x612 <spi_cmd>
 870:	2e de       	rcall	.-932    	; 0x4ce <lcd_clrscr>

            /* open door */
            led_door_on();
 872:	89 e1       	ldi	r24, 0x19	; 25
 874:	92 e0       	ldi	r25, 0x02	; 2
            spi_cmd(CMD_DING);
 876:	40 de       	rcall	.-896    	; 0x4f8 <lcd_puts>
 878:	88 e8       	ldi	r24, 0x88	; 136
 87a:	93 e1       	ldi	r25, 0x13	; 19
            lcd_clrscr(); lcd_puts("Door opening...");
 87c:	94 de       	rcall	.-728    	; 0x5a6 <wait_ms>
 87e:	e1 de       	rcall	.-574    	; 0x642 <led_door_off>
 880:	26 de       	rcall	.-948    	; 0x4ce <lcd_clrscr>
 882:	89 e2       	ldi	r24, 0x29	; 41
 884:	92 e0       	ldi	r25, 0x02	; 2
 886:	38 de       	rcall	.-912    	; 0x4f8 <lcd_puts>
            wait_ms(5000);                    /* keep door open 5 s */
 888:	8c ed       	ldi	r24, 0xDC	; 220
 88a:	95 e0       	ldi	r25, 0x05	; 5
 88c:	8c de       	rcall	.-744    	; 0x5a6 <wait_ms>
 88e:	e1 2c       	mov	r14, r1

            /* close door and return to idle */
            led_door_off();
 890:	40 cf       	rjmp	.-384    	; 0x712 <main+0x62>

00000892 <__tablejump2__>:
 892:	ee 0f       	add	r30, r30
            lcd_clrscr(); lcd_puts("Door closed");
 894:	ff 1f       	adc	r31, r31
 896:	88 1f       	adc	r24, r24
 898:	8b bf       	out	0x3b, r24	; 59
 89a:	07 90       	elpm	r0, Z+
 89c:	f6 91       	elpm	r31, Z
 89e:	e0 2d       	mov	r30, r0
            wait_ms(1500);
 8a0:	19 94       	eijmp

000008a2 <__umulhisi3>:
 8a2:	a2 9f       	mul	r26, r18
 8a4:	b0 01       	movw	r22, r0
 8a6:	b3 9f       	mul	r27, r19
            state = ST_IDLE;
 8a8:	c0 01       	movw	r24, r0
            break;
 8aa:	a3 9f       	mul	r26, r19
 8ac:	70 0d       	add	r23, r0
 8ae:	81 1d       	adc	r24, r1
 8b0:	11 24       	eor	r1, r1
 8b2:	91 1d       	adc	r25, r1
 8b4:	b2 9f       	mul	r27, r18
 8b6:	70 0d       	add	r23, r0
 8b8:	81 1d       	adc	r24, r1
 8ba:	11 24       	eor	r1, r1
 8bc:	91 1d       	adc	r25, r1
 8be:	08 95       	ret

000008c0 <sprintf>:
 8c0:	0f 93       	push	r16
 8c2:	1f 93       	push	r17
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	cd b7       	in	r28, 0x3d	; 61
 8ca:	de b7       	in	r29, 0x3e	; 62
 8cc:	2e 97       	sbiw	r28, 0x0e	; 14
 8ce:	0f b6       	in	r0, 0x3f	; 63
 8d0:	f8 94       	cli
 8d2:	de bf       	out	0x3e, r29	; 62
 8d4:	0f be       	out	0x3f, r0	; 63
 8d6:	cd bf       	out	0x3d, r28	; 61
 8d8:	0e 89       	ldd	r16, Y+22	; 0x16
 8da:	1f 89       	ldd	r17, Y+23	; 0x17
 8dc:	86 e0       	ldi	r24, 0x06	; 6
 8de:	8c 83       	std	Y+4, r24	; 0x04
 8e0:	1a 83       	std	Y+2, r17	; 0x02
 8e2:	09 83       	std	Y+1, r16	; 0x01
 8e4:	8f ef       	ldi	r24, 0xFF	; 255
 8e6:	9f e7       	ldi	r25, 0x7F	; 127
 8e8:	9e 83       	std	Y+6, r25	; 0x06
 8ea:	8d 83       	std	Y+5, r24	; 0x05
 8ec:	ae 01       	movw	r20, r28
 8ee:	46 5e       	subi	r20, 0xE6	; 230
 8f0:	5f 4f       	sbci	r21, 0xFF	; 255
 8f2:	68 8d       	ldd	r22, Y+24	; 0x18
 8f4:	79 8d       	ldd	r23, Y+25	; 0x19
 8f6:	ce 01       	movw	r24, r28
 8f8:	01 96       	adiw	r24, 0x01	; 1
 8fa:	10 d0       	rcall	.+32     	; 0x91c <vfprintf>
 8fc:	ef 81       	ldd	r30, Y+7	; 0x07
 8fe:	f8 85       	ldd	r31, Y+8	; 0x08
 900:	e0 0f       	add	r30, r16
 902:	f1 1f       	adc	r31, r17
 904:	10 82       	st	Z, r1
 906:	2e 96       	adiw	r28, 0x0e	; 14
 908:	0f b6       	in	r0, 0x3f	; 63
 90a:	f8 94       	cli
 90c:	de bf       	out	0x3e, r29	; 62
 90e:	0f be       	out	0x3f, r0	; 63
 910:	cd bf       	out	0x3d, r28	; 61
 912:	df 91       	pop	r29
 914:	cf 91       	pop	r28
 916:	1f 91       	pop	r17
 918:	0f 91       	pop	r16
 91a:	08 95       	ret

0000091c <vfprintf>:
 91c:	2f 92       	push	r2
 91e:	3f 92       	push	r3
 920:	4f 92       	push	r4
 922:	5f 92       	push	r5
 924:	6f 92       	push	r6
 926:	7f 92       	push	r7
 928:	8f 92       	push	r8
 92a:	9f 92       	push	r9
 92c:	af 92       	push	r10
 92e:	bf 92       	push	r11
 930:	cf 92       	push	r12
 932:	df 92       	push	r13
 934:	ef 92       	push	r14
 936:	ff 92       	push	r15
 938:	0f 93       	push	r16
 93a:	1f 93       	push	r17
 93c:	cf 93       	push	r28
 93e:	df 93       	push	r29
 940:	cd b7       	in	r28, 0x3d	; 61
 942:	de b7       	in	r29, 0x3e	; 62
 944:	2b 97       	sbiw	r28, 0x0b	; 11
 946:	0f b6       	in	r0, 0x3f	; 63
 948:	f8 94       	cli
 94a:	de bf       	out	0x3e, r29	; 62
 94c:	0f be       	out	0x3f, r0	; 63
 94e:	cd bf       	out	0x3d, r28	; 61
 950:	6c 01       	movw	r12, r24
 952:	7b 01       	movw	r14, r22
 954:	8a 01       	movw	r16, r20
 956:	fc 01       	movw	r30, r24
 958:	17 82       	std	Z+7, r1	; 0x07
 95a:	16 82       	std	Z+6, r1	; 0x06
 95c:	83 81       	ldd	r24, Z+3	; 0x03
 95e:	81 ff       	sbrs	r24, 1
 960:	bf c1       	rjmp	.+894    	; 0xce0 <vfprintf+0x3c4>
 962:	ce 01       	movw	r24, r28
 964:	01 96       	adiw	r24, 0x01	; 1
 966:	3c 01       	movw	r6, r24
 968:	f6 01       	movw	r30, r12
 96a:	93 81       	ldd	r25, Z+3	; 0x03
 96c:	f7 01       	movw	r30, r14
 96e:	93 fd       	sbrc	r25, 3
 970:	85 91       	lpm	r24, Z+
 972:	93 ff       	sbrs	r25, 3
 974:	81 91       	ld	r24, Z+
 976:	7f 01       	movw	r14, r30
 978:	88 23       	and	r24, r24
 97a:	09 f4       	brne	.+2      	; 0x97e <vfprintf+0x62>
 97c:	ad c1       	rjmp	.+858    	; 0xcd8 <vfprintf+0x3bc>
 97e:	85 32       	cpi	r24, 0x25	; 37
 980:	39 f4       	brne	.+14     	; 0x990 <vfprintf+0x74>
 982:	93 fd       	sbrc	r25, 3
 984:	85 91       	lpm	r24, Z+
 986:	93 ff       	sbrs	r25, 3
 988:	81 91       	ld	r24, Z+
 98a:	7f 01       	movw	r14, r30
 98c:	85 32       	cpi	r24, 0x25	; 37
 98e:	21 f4       	brne	.+8      	; 0x998 <vfprintf+0x7c>
 990:	b6 01       	movw	r22, r12
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	d6 d1       	rcall	.+940    	; 0xd42 <fputc>
 996:	e8 cf       	rjmp	.-48     	; 0x968 <vfprintf+0x4c>
 998:	91 2c       	mov	r9, r1
 99a:	21 2c       	mov	r2, r1
 99c:	31 2c       	mov	r3, r1
 99e:	ff e1       	ldi	r31, 0x1F	; 31
 9a0:	f3 15       	cp	r31, r3
 9a2:	d8 f0       	brcs	.+54     	; 0x9da <vfprintf+0xbe>
 9a4:	8b 32       	cpi	r24, 0x2B	; 43
 9a6:	79 f0       	breq	.+30     	; 0x9c6 <vfprintf+0xaa>
 9a8:	38 f4       	brcc	.+14     	; 0x9b8 <vfprintf+0x9c>
 9aa:	80 32       	cpi	r24, 0x20	; 32
 9ac:	79 f0       	breq	.+30     	; 0x9cc <vfprintf+0xb0>
 9ae:	83 32       	cpi	r24, 0x23	; 35
 9b0:	a1 f4       	brne	.+40     	; 0x9da <vfprintf+0xbe>
 9b2:	23 2d       	mov	r18, r3
 9b4:	20 61       	ori	r18, 0x10	; 16
 9b6:	1d c0       	rjmp	.+58     	; 0x9f2 <vfprintf+0xd6>
 9b8:	8d 32       	cpi	r24, 0x2D	; 45
 9ba:	61 f0       	breq	.+24     	; 0x9d4 <vfprintf+0xb8>
 9bc:	80 33       	cpi	r24, 0x30	; 48
 9be:	69 f4       	brne	.+26     	; 0x9da <vfprintf+0xbe>
 9c0:	23 2d       	mov	r18, r3
 9c2:	21 60       	ori	r18, 0x01	; 1
 9c4:	16 c0       	rjmp	.+44     	; 0x9f2 <vfprintf+0xd6>
 9c6:	83 2d       	mov	r24, r3
 9c8:	82 60       	ori	r24, 0x02	; 2
 9ca:	38 2e       	mov	r3, r24
 9cc:	e3 2d       	mov	r30, r3
 9ce:	e4 60       	ori	r30, 0x04	; 4
 9d0:	3e 2e       	mov	r3, r30
 9d2:	2a c0       	rjmp	.+84     	; 0xa28 <vfprintf+0x10c>
 9d4:	f3 2d       	mov	r31, r3
 9d6:	f8 60       	ori	r31, 0x08	; 8
 9d8:	1d c0       	rjmp	.+58     	; 0xa14 <vfprintf+0xf8>
 9da:	37 fc       	sbrc	r3, 7
 9dc:	2d c0       	rjmp	.+90     	; 0xa38 <vfprintf+0x11c>
 9de:	20 ed       	ldi	r18, 0xD0	; 208
 9e0:	28 0f       	add	r18, r24
 9e2:	2a 30       	cpi	r18, 0x0A	; 10
 9e4:	40 f0       	brcs	.+16     	; 0x9f6 <vfprintf+0xda>
 9e6:	8e 32       	cpi	r24, 0x2E	; 46
 9e8:	b9 f4       	brne	.+46     	; 0xa18 <vfprintf+0xfc>
 9ea:	36 fc       	sbrc	r3, 6
 9ec:	75 c1       	rjmp	.+746    	; 0xcd8 <vfprintf+0x3bc>
 9ee:	23 2d       	mov	r18, r3
 9f0:	20 64       	ori	r18, 0x40	; 64
 9f2:	32 2e       	mov	r3, r18
 9f4:	19 c0       	rjmp	.+50     	; 0xa28 <vfprintf+0x10c>
 9f6:	36 fe       	sbrs	r3, 6
 9f8:	06 c0       	rjmp	.+12     	; 0xa06 <vfprintf+0xea>
 9fa:	8a e0       	ldi	r24, 0x0A	; 10
 9fc:	98 9e       	mul	r9, r24
 9fe:	20 0d       	add	r18, r0
 a00:	11 24       	eor	r1, r1
 a02:	92 2e       	mov	r9, r18
 a04:	11 c0       	rjmp	.+34     	; 0xa28 <vfprintf+0x10c>
 a06:	ea e0       	ldi	r30, 0x0A	; 10
 a08:	2e 9e       	mul	r2, r30
 a0a:	20 0d       	add	r18, r0
 a0c:	11 24       	eor	r1, r1
 a0e:	22 2e       	mov	r2, r18
 a10:	f3 2d       	mov	r31, r3
 a12:	f0 62       	ori	r31, 0x20	; 32
 a14:	3f 2e       	mov	r3, r31
 a16:	08 c0       	rjmp	.+16     	; 0xa28 <vfprintf+0x10c>
 a18:	8c 36       	cpi	r24, 0x6C	; 108
 a1a:	21 f4       	brne	.+8      	; 0xa24 <vfprintf+0x108>
 a1c:	83 2d       	mov	r24, r3
 a1e:	80 68       	ori	r24, 0x80	; 128
 a20:	38 2e       	mov	r3, r24
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <vfprintf+0x10c>
 a24:	88 36       	cpi	r24, 0x68	; 104
 a26:	41 f4       	brne	.+16     	; 0xa38 <vfprintf+0x11c>
 a28:	f7 01       	movw	r30, r14
 a2a:	93 fd       	sbrc	r25, 3
 a2c:	85 91       	lpm	r24, Z+
 a2e:	93 ff       	sbrs	r25, 3
 a30:	81 91       	ld	r24, Z+
 a32:	7f 01       	movw	r14, r30
 a34:	81 11       	cpse	r24, r1
 a36:	b3 cf       	rjmp	.-154    	; 0x99e <vfprintf+0x82>
 a38:	98 2f       	mov	r25, r24
 a3a:	9f 7d       	andi	r25, 0xDF	; 223
 a3c:	95 54       	subi	r25, 0x45	; 69
 a3e:	93 30       	cpi	r25, 0x03	; 3
 a40:	28 f4       	brcc	.+10     	; 0xa4c <vfprintf+0x130>
 a42:	0c 5f       	subi	r16, 0xFC	; 252
 a44:	1f 4f       	sbci	r17, 0xFF	; 255
 a46:	9f e3       	ldi	r25, 0x3F	; 63
 a48:	99 83       	std	Y+1, r25	; 0x01
 a4a:	0d c0       	rjmp	.+26     	; 0xa66 <vfprintf+0x14a>
 a4c:	83 36       	cpi	r24, 0x63	; 99
 a4e:	31 f0       	breq	.+12     	; 0xa5c <vfprintf+0x140>
 a50:	83 37       	cpi	r24, 0x73	; 115
 a52:	71 f0       	breq	.+28     	; 0xa70 <vfprintf+0x154>
 a54:	83 35       	cpi	r24, 0x53	; 83
 a56:	09 f0       	breq	.+2      	; 0xa5a <vfprintf+0x13e>
 a58:	55 c0       	rjmp	.+170    	; 0xb04 <vfprintf+0x1e8>
 a5a:	20 c0       	rjmp	.+64     	; 0xa9c <vfprintf+0x180>
 a5c:	f8 01       	movw	r30, r16
 a5e:	80 81       	ld	r24, Z
 a60:	89 83       	std	Y+1, r24	; 0x01
 a62:	0e 5f       	subi	r16, 0xFE	; 254
 a64:	1f 4f       	sbci	r17, 0xFF	; 255
 a66:	88 24       	eor	r8, r8
 a68:	83 94       	inc	r8
 a6a:	91 2c       	mov	r9, r1
 a6c:	53 01       	movw	r10, r6
 a6e:	12 c0       	rjmp	.+36     	; 0xa94 <vfprintf+0x178>
 a70:	28 01       	movw	r4, r16
 a72:	f2 e0       	ldi	r31, 0x02	; 2
 a74:	4f 0e       	add	r4, r31
 a76:	51 1c       	adc	r5, r1
 a78:	f8 01       	movw	r30, r16
 a7a:	a0 80       	ld	r10, Z
 a7c:	b1 80       	ldd	r11, Z+1	; 0x01
 a7e:	36 fe       	sbrs	r3, 6
 a80:	03 c0       	rjmp	.+6      	; 0xa88 <vfprintf+0x16c>
 a82:	69 2d       	mov	r22, r9
 a84:	70 e0       	ldi	r23, 0x00	; 0
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <vfprintf+0x170>
 a88:	6f ef       	ldi	r22, 0xFF	; 255
 a8a:	7f ef       	ldi	r23, 0xFF	; 255
 a8c:	c5 01       	movw	r24, r10
 a8e:	4e d1       	rcall	.+668    	; 0xd2c <strnlen>
 a90:	4c 01       	movw	r8, r24
 a92:	82 01       	movw	r16, r4
 a94:	f3 2d       	mov	r31, r3
 a96:	ff 77       	andi	r31, 0x7F	; 127
 a98:	3f 2e       	mov	r3, r31
 a9a:	15 c0       	rjmp	.+42     	; 0xac6 <vfprintf+0x1aa>
 a9c:	28 01       	movw	r4, r16
 a9e:	22 e0       	ldi	r18, 0x02	; 2
 aa0:	42 0e       	add	r4, r18
 aa2:	51 1c       	adc	r5, r1
 aa4:	f8 01       	movw	r30, r16
 aa6:	a0 80       	ld	r10, Z
 aa8:	b1 80       	ldd	r11, Z+1	; 0x01
 aaa:	36 fe       	sbrs	r3, 6
 aac:	03 c0       	rjmp	.+6      	; 0xab4 <vfprintf+0x198>
 aae:	69 2d       	mov	r22, r9
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <vfprintf+0x19c>
 ab4:	6f ef       	ldi	r22, 0xFF	; 255
 ab6:	7f ef       	ldi	r23, 0xFF	; 255
 ab8:	c5 01       	movw	r24, r10
 aba:	2d d1       	rcall	.+602    	; 0xd16 <strnlen_P>
 abc:	4c 01       	movw	r8, r24
 abe:	f3 2d       	mov	r31, r3
 ac0:	f0 68       	ori	r31, 0x80	; 128
 ac2:	3f 2e       	mov	r3, r31
 ac4:	82 01       	movw	r16, r4
 ac6:	33 fc       	sbrc	r3, 3
 ac8:	19 c0       	rjmp	.+50     	; 0xafc <vfprintf+0x1e0>
 aca:	82 2d       	mov	r24, r2
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	88 16       	cp	r8, r24
 ad0:	99 06       	cpc	r9, r25
 ad2:	a0 f4       	brcc	.+40     	; 0xafc <vfprintf+0x1e0>
 ad4:	b6 01       	movw	r22, r12
 ad6:	80 e2       	ldi	r24, 0x20	; 32
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	33 d1       	rcall	.+614    	; 0xd42 <fputc>
 adc:	2a 94       	dec	r2
 ade:	f5 cf       	rjmp	.-22     	; 0xaca <vfprintf+0x1ae>
 ae0:	f5 01       	movw	r30, r10
 ae2:	37 fc       	sbrc	r3, 7
 ae4:	85 91       	lpm	r24, Z+
 ae6:	37 fe       	sbrs	r3, 7
 ae8:	81 91       	ld	r24, Z+
 aea:	5f 01       	movw	r10, r30
 aec:	b6 01       	movw	r22, r12
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	28 d1       	rcall	.+592    	; 0xd42 <fputc>
 af2:	21 10       	cpse	r2, r1
 af4:	2a 94       	dec	r2
 af6:	21 e0       	ldi	r18, 0x01	; 1
 af8:	82 1a       	sub	r8, r18
 afa:	91 08       	sbc	r9, r1
 afc:	81 14       	cp	r8, r1
 afe:	91 04       	cpc	r9, r1
 b00:	79 f7       	brne	.-34     	; 0xae0 <vfprintf+0x1c4>
 b02:	e1 c0       	rjmp	.+450    	; 0xcc6 <vfprintf+0x3aa>
 b04:	84 36       	cpi	r24, 0x64	; 100
 b06:	11 f0       	breq	.+4      	; 0xb0c <vfprintf+0x1f0>
 b08:	89 36       	cpi	r24, 0x69	; 105
 b0a:	39 f5       	brne	.+78     	; 0xb5a <vfprintf+0x23e>
 b0c:	f8 01       	movw	r30, r16
 b0e:	37 fe       	sbrs	r3, 7
 b10:	07 c0       	rjmp	.+14     	; 0xb20 <vfprintf+0x204>
 b12:	60 81       	ld	r22, Z
 b14:	71 81       	ldd	r23, Z+1	; 0x01
 b16:	82 81       	ldd	r24, Z+2	; 0x02
 b18:	93 81       	ldd	r25, Z+3	; 0x03
 b1a:	0c 5f       	subi	r16, 0xFC	; 252
 b1c:	1f 4f       	sbci	r17, 0xFF	; 255
 b1e:	08 c0       	rjmp	.+16     	; 0xb30 <vfprintf+0x214>
 b20:	60 81       	ld	r22, Z
 b22:	71 81       	ldd	r23, Z+1	; 0x01
 b24:	07 2e       	mov	r0, r23
 b26:	00 0c       	add	r0, r0
 b28:	88 0b       	sbc	r24, r24
 b2a:	99 0b       	sbc	r25, r25
 b2c:	0e 5f       	subi	r16, 0xFE	; 254
 b2e:	1f 4f       	sbci	r17, 0xFF	; 255
 b30:	f3 2d       	mov	r31, r3
 b32:	ff 76       	andi	r31, 0x6F	; 111
 b34:	3f 2e       	mov	r3, r31
 b36:	97 ff       	sbrs	r25, 7
 b38:	09 c0       	rjmp	.+18     	; 0xb4c <vfprintf+0x230>
 b3a:	90 95       	com	r25
 b3c:	80 95       	com	r24
 b3e:	70 95       	com	r23
 b40:	61 95       	neg	r22
 b42:	7f 4f       	sbci	r23, 0xFF	; 255
 b44:	8f 4f       	sbci	r24, 0xFF	; 255
 b46:	9f 4f       	sbci	r25, 0xFF	; 255
 b48:	f0 68       	ori	r31, 0x80	; 128
 b4a:	3f 2e       	mov	r3, r31
 b4c:	2a e0       	ldi	r18, 0x0A	; 10
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	a3 01       	movw	r20, r6
 b52:	33 d1       	rcall	.+614    	; 0xdba <__ultoa_invert>
 b54:	88 2e       	mov	r8, r24
 b56:	86 18       	sub	r8, r6
 b58:	44 c0       	rjmp	.+136    	; 0xbe2 <vfprintf+0x2c6>
 b5a:	85 37       	cpi	r24, 0x75	; 117
 b5c:	31 f4       	brne	.+12     	; 0xb6a <vfprintf+0x24e>
 b5e:	23 2d       	mov	r18, r3
 b60:	2f 7e       	andi	r18, 0xEF	; 239
 b62:	b2 2e       	mov	r11, r18
 b64:	2a e0       	ldi	r18, 0x0A	; 10
 b66:	30 e0       	ldi	r19, 0x00	; 0
 b68:	25 c0       	rjmp	.+74     	; 0xbb4 <vfprintf+0x298>
 b6a:	93 2d       	mov	r25, r3
 b6c:	99 7f       	andi	r25, 0xF9	; 249
 b6e:	b9 2e       	mov	r11, r25
 b70:	8f 36       	cpi	r24, 0x6F	; 111
 b72:	c1 f0       	breq	.+48     	; 0xba4 <vfprintf+0x288>
 b74:	18 f4       	brcc	.+6      	; 0xb7c <vfprintf+0x260>
 b76:	88 35       	cpi	r24, 0x58	; 88
 b78:	79 f0       	breq	.+30     	; 0xb98 <vfprintf+0x27c>
 b7a:	ae c0       	rjmp	.+348    	; 0xcd8 <vfprintf+0x3bc>
 b7c:	80 37       	cpi	r24, 0x70	; 112
 b7e:	19 f0       	breq	.+6      	; 0xb86 <vfprintf+0x26a>
 b80:	88 37       	cpi	r24, 0x78	; 120
 b82:	21 f0       	breq	.+8      	; 0xb8c <vfprintf+0x270>
 b84:	a9 c0       	rjmp	.+338    	; 0xcd8 <vfprintf+0x3bc>
 b86:	e9 2f       	mov	r30, r25
 b88:	e0 61       	ori	r30, 0x10	; 16
 b8a:	be 2e       	mov	r11, r30
 b8c:	b4 fe       	sbrs	r11, 4
 b8e:	0d c0       	rjmp	.+26     	; 0xbaa <vfprintf+0x28e>
 b90:	fb 2d       	mov	r31, r11
 b92:	f4 60       	ori	r31, 0x04	; 4
 b94:	bf 2e       	mov	r11, r31
 b96:	09 c0       	rjmp	.+18     	; 0xbaa <vfprintf+0x28e>
 b98:	34 fe       	sbrs	r3, 4
 b9a:	0a c0       	rjmp	.+20     	; 0xbb0 <vfprintf+0x294>
 b9c:	29 2f       	mov	r18, r25
 b9e:	26 60       	ori	r18, 0x06	; 6
 ba0:	b2 2e       	mov	r11, r18
 ba2:	06 c0       	rjmp	.+12     	; 0xbb0 <vfprintf+0x294>
 ba4:	28 e0       	ldi	r18, 0x08	; 8
 ba6:	30 e0       	ldi	r19, 0x00	; 0
 ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <vfprintf+0x298>
 baa:	20 e1       	ldi	r18, 0x10	; 16
 bac:	30 e0       	ldi	r19, 0x00	; 0
 bae:	02 c0       	rjmp	.+4      	; 0xbb4 <vfprintf+0x298>
 bb0:	20 e1       	ldi	r18, 0x10	; 16
 bb2:	32 e0       	ldi	r19, 0x02	; 2
 bb4:	f8 01       	movw	r30, r16
 bb6:	b7 fe       	sbrs	r11, 7
 bb8:	07 c0       	rjmp	.+14     	; 0xbc8 <vfprintf+0x2ac>
 bba:	60 81       	ld	r22, Z
 bbc:	71 81       	ldd	r23, Z+1	; 0x01
 bbe:	82 81       	ldd	r24, Z+2	; 0x02
 bc0:	93 81       	ldd	r25, Z+3	; 0x03
 bc2:	0c 5f       	subi	r16, 0xFC	; 252
 bc4:	1f 4f       	sbci	r17, 0xFF	; 255
 bc6:	06 c0       	rjmp	.+12     	; 0xbd4 <vfprintf+0x2b8>
 bc8:	60 81       	ld	r22, Z
 bca:	71 81       	ldd	r23, Z+1	; 0x01
 bcc:	80 e0       	ldi	r24, 0x00	; 0
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	0e 5f       	subi	r16, 0xFE	; 254
 bd2:	1f 4f       	sbci	r17, 0xFF	; 255
 bd4:	a3 01       	movw	r20, r6
 bd6:	f1 d0       	rcall	.+482    	; 0xdba <__ultoa_invert>
 bd8:	88 2e       	mov	r8, r24
 bda:	86 18       	sub	r8, r6
 bdc:	fb 2d       	mov	r31, r11
 bde:	ff 77       	andi	r31, 0x7F	; 127
 be0:	3f 2e       	mov	r3, r31
 be2:	36 fe       	sbrs	r3, 6
 be4:	0d c0       	rjmp	.+26     	; 0xc00 <vfprintf+0x2e4>
 be6:	23 2d       	mov	r18, r3
 be8:	2e 7f       	andi	r18, 0xFE	; 254
 bea:	a2 2e       	mov	r10, r18
 bec:	89 14       	cp	r8, r9
 bee:	58 f4       	brcc	.+22     	; 0xc06 <vfprintf+0x2ea>
 bf0:	34 fe       	sbrs	r3, 4
 bf2:	0b c0       	rjmp	.+22     	; 0xc0a <vfprintf+0x2ee>
 bf4:	32 fc       	sbrc	r3, 2
 bf6:	09 c0       	rjmp	.+18     	; 0xc0a <vfprintf+0x2ee>
 bf8:	83 2d       	mov	r24, r3
 bfa:	8e 7e       	andi	r24, 0xEE	; 238
 bfc:	a8 2e       	mov	r10, r24
 bfe:	05 c0       	rjmp	.+10     	; 0xc0a <vfprintf+0x2ee>
 c00:	b8 2c       	mov	r11, r8
 c02:	a3 2c       	mov	r10, r3
 c04:	03 c0       	rjmp	.+6      	; 0xc0c <vfprintf+0x2f0>
 c06:	b8 2c       	mov	r11, r8
 c08:	01 c0       	rjmp	.+2      	; 0xc0c <vfprintf+0x2f0>
 c0a:	b9 2c       	mov	r11, r9
 c0c:	a4 fe       	sbrs	r10, 4
 c0e:	0f c0       	rjmp	.+30     	; 0xc2e <vfprintf+0x312>
 c10:	fe 01       	movw	r30, r28
 c12:	e8 0d       	add	r30, r8
 c14:	f1 1d       	adc	r31, r1
 c16:	80 81       	ld	r24, Z
 c18:	80 33       	cpi	r24, 0x30	; 48
 c1a:	21 f4       	brne	.+8      	; 0xc24 <vfprintf+0x308>
 c1c:	9a 2d       	mov	r25, r10
 c1e:	99 7e       	andi	r25, 0xE9	; 233
 c20:	a9 2e       	mov	r10, r25
 c22:	09 c0       	rjmp	.+18     	; 0xc36 <vfprintf+0x31a>
 c24:	a2 fe       	sbrs	r10, 2
 c26:	06 c0       	rjmp	.+12     	; 0xc34 <vfprintf+0x318>
 c28:	b3 94       	inc	r11
 c2a:	b3 94       	inc	r11
 c2c:	04 c0       	rjmp	.+8      	; 0xc36 <vfprintf+0x31a>
 c2e:	8a 2d       	mov	r24, r10
 c30:	86 78       	andi	r24, 0x86	; 134
 c32:	09 f0       	breq	.+2      	; 0xc36 <vfprintf+0x31a>
 c34:	b3 94       	inc	r11
 c36:	a3 fc       	sbrc	r10, 3
 c38:	10 c0       	rjmp	.+32     	; 0xc5a <vfprintf+0x33e>
 c3a:	a0 fe       	sbrs	r10, 0
 c3c:	06 c0       	rjmp	.+12     	; 0xc4a <vfprintf+0x32e>
 c3e:	b2 14       	cp	r11, r2
 c40:	80 f4       	brcc	.+32     	; 0xc62 <vfprintf+0x346>
 c42:	28 0c       	add	r2, r8
 c44:	92 2c       	mov	r9, r2
 c46:	9b 18       	sub	r9, r11
 c48:	0d c0       	rjmp	.+26     	; 0xc64 <vfprintf+0x348>
 c4a:	b2 14       	cp	r11, r2
 c4c:	58 f4       	brcc	.+22     	; 0xc64 <vfprintf+0x348>
 c4e:	b6 01       	movw	r22, r12
 c50:	80 e2       	ldi	r24, 0x20	; 32
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	76 d0       	rcall	.+236    	; 0xd42 <fputc>
 c56:	b3 94       	inc	r11
 c58:	f8 cf       	rjmp	.-16     	; 0xc4a <vfprintf+0x32e>
 c5a:	b2 14       	cp	r11, r2
 c5c:	18 f4       	brcc	.+6      	; 0xc64 <vfprintf+0x348>
 c5e:	2b 18       	sub	r2, r11
 c60:	02 c0       	rjmp	.+4      	; 0xc66 <vfprintf+0x34a>
 c62:	98 2c       	mov	r9, r8
 c64:	21 2c       	mov	r2, r1
 c66:	a4 fe       	sbrs	r10, 4
 c68:	0f c0       	rjmp	.+30     	; 0xc88 <vfprintf+0x36c>
 c6a:	b6 01       	movw	r22, r12
 c6c:	80 e3       	ldi	r24, 0x30	; 48
 c6e:	90 e0       	ldi	r25, 0x00	; 0
 c70:	68 d0       	rcall	.+208    	; 0xd42 <fputc>
 c72:	a2 fe       	sbrs	r10, 2
 c74:	16 c0       	rjmp	.+44     	; 0xca2 <vfprintf+0x386>
 c76:	a1 fc       	sbrc	r10, 1
 c78:	03 c0       	rjmp	.+6      	; 0xc80 <vfprintf+0x364>
 c7a:	88 e7       	ldi	r24, 0x78	; 120
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	02 c0       	rjmp	.+4      	; 0xc84 <vfprintf+0x368>
 c80:	88 e5       	ldi	r24, 0x58	; 88
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	b6 01       	movw	r22, r12
 c86:	0c c0       	rjmp	.+24     	; 0xca0 <vfprintf+0x384>
 c88:	8a 2d       	mov	r24, r10
 c8a:	86 78       	andi	r24, 0x86	; 134
 c8c:	51 f0       	breq	.+20     	; 0xca2 <vfprintf+0x386>
 c8e:	a1 fe       	sbrs	r10, 1
 c90:	02 c0       	rjmp	.+4      	; 0xc96 <vfprintf+0x37a>
 c92:	8b e2       	ldi	r24, 0x2B	; 43
 c94:	01 c0       	rjmp	.+2      	; 0xc98 <vfprintf+0x37c>
 c96:	80 e2       	ldi	r24, 0x20	; 32
 c98:	a7 fc       	sbrc	r10, 7
 c9a:	8d e2       	ldi	r24, 0x2D	; 45
 c9c:	b6 01       	movw	r22, r12
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	50 d0       	rcall	.+160    	; 0xd42 <fputc>
 ca2:	89 14       	cp	r8, r9
 ca4:	30 f4       	brcc	.+12     	; 0xcb2 <vfprintf+0x396>
 ca6:	b6 01       	movw	r22, r12
 ca8:	80 e3       	ldi	r24, 0x30	; 48
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	4a d0       	rcall	.+148    	; 0xd42 <fputc>
 cae:	9a 94       	dec	r9
 cb0:	f8 cf       	rjmp	.-16     	; 0xca2 <vfprintf+0x386>
 cb2:	8a 94       	dec	r8
 cb4:	f3 01       	movw	r30, r6
 cb6:	e8 0d       	add	r30, r8
 cb8:	f1 1d       	adc	r31, r1
 cba:	80 81       	ld	r24, Z
 cbc:	b6 01       	movw	r22, r12
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	40 d0       	rcall	.+128    	; 0xd42 <fputc>
 cc2:	81 10       	cpse	r8, r1
 cc4:	f6 cf       	rjmp	.-20     	; 0xcb2 <vfprintf+0x396>
 cc6:	22 20       	and	r2, r2
 cc8:	09 f4       	brne	.+2      	; 0xccc <vfprintf+0x3b0>
 cca:	4e ce       	rjmp	.-868    	; 0x968 <vfprintf+0x4c>
 ccc:	b6 01       	movw	r22, r12
 cce:	80 e2       	ldi	r24, 0x20	; 32
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	37 d0       	rcall	.+110    	; 0xd42 <fputc>
 cd4:	2a 94       	dec	r2
 cd6:	f7 cf       	rjmp	.-18     	; 0xcc6 <vfprintf+0x3aa>
 cd8:	f6 01       	movw	r30, r12
 cda:	86 81       	ldd	r24, Z+6	; 0x06
 cdc:	97 81       	ldd	r25, Z+7	; 0x07
 cde:	02 c0       	rjmp	.+4      	; 0xce4 <vfprintf+0x3c8>
 ce0:	8f ef       	ldi	r24, 0xFF	; 255
 ce2:	9f ef       	ldi	r25, 0xFF	; 255
 ce4:	2b 96       	adiw	r28, 0x0b	; 11
 ce6:	0f b6       	in	r0, 0x3f	; 63
 ce8:	f8 94       	cli
 cea:	de bf       	out	0x3e, r29	; 62
 cec:	0f be       	out	0x3f, r0	; 63
 cee:	cd bf       	out	0x3d, r28	; 61
 cf0:	df 91       	pop	r29
 cf2:	cf 91       	pop	r28
 cf4:	1f 91       	pop	r17
 cf6:	0f 91       	pop	r16
 cf8:	ff 90       	pop	r15
 cfa:	ef 90       	pop	r14
 cfc:	df 90       	pop	r13
 cfe:	cf 90       	pop	r12
 d00:	bf 90       	pop	r11
 d02:	af 90       	pop	r10
 d04:	9f 90       	pop	r9
 d06:	8f 90       	pop	r8
 d08:	7f 90       	pop	r7
 d0a:	6f 90       	pop	r6
 d0c:	5f 90       	pop	r5
 d0e:	4f 90       	pop	r4
 d10:	3f 90       	pop	r3
 d12:	2f 90       	pop	r2
 d14:	08 95       	ret

00000d16 <strnlen_P>:
 d16:	fc 01       	movw	r30, r24
 d18:	05 90       	lpm	r0, Z+
 d1a:	61 50       	subi	r22, 0x01	; 1
 d1c:	70 40       	sbci	r23, 0x00	; 0
 d1e:	01 10       	cpse	r0, r1
 d20:	d8 f7       	brcc	.-10     	; 0xd18 <strnlen_P+0x2>
 d22:	80 95       	com	r24
 d24:	90 95       	com	r25
 d26:	8e 0f       	add	r24, r30
 d28:	9f 1f       	adc	r25, r31
 d2a:	08 95       	ret

00000d2c <strnlen>:
 d2c:	fc 01       	movw	r30, r24
 d2e:	61 50       	subi	r22, 0x01	; 1
 d30:	70 40       	sbci	r23, 0x00	; 0
 d32:	01 90       	ld	r0, Z+
 d34:	01 10       	cpse	r0, r1
 d36:	d8 f7       	brcc	.-10     	; 0xd2e <strnlen+0x2>
 d38:	80 95       	com	r24
 d3a:	90 95       	com	r25
 d3c:	8e 0f       	add	r24, r30
 d3e:	9f 1f       	adc	r25, r31
 d40:	08 95       	ret

00000d42 <fputc>:
 d42:	0f 93       	push	r16
 d44:	1f 93       	push	r17
 d46:	cf 93       	push	r28
 d48:	df 93       	push	r29
 d4a:	fb 01       	movw	r30, r22
 d4c:	23 81       	ldd	r18, Z+3	; 0x03
 d4e:	21 fd       	sbrc	r18, 1
 d50:	03 c0       	rjmp	.+6      	; 0xd58 <fputc+0x16>
 d52:	8f ef       	ldi	r24, 0xFF	; 255
 d54:	9f ef       	ldi	r25, 0xFF	; 255
 d56:	2c c0       	rjmp	.+88     	; 0xdb0 <fputc+0x6e>
 d58:	22 ff       	sbrs	r18, 2
 d5a:	16 c0       	rjmp	.+44     	; 0xd88 <fputc+0x46>
 d5c:	46 81       	ldd	r20, Z+6	; 0x06
 d5e:	57 81       	ldd	r21, Z+7	; 0x07
 d60:	24 81       	ldd	r18, Z+4	; 0x04
 d62:	35 81       	ldd	r19, Z+5	; 0x05
 d64:	42 17       	cp	r20, r18
 d66:	53 07       	cpc	r21, r19
 d68:	44 f4       	brge	.+16     	; 0xd7a <fputc+0x38>
 d6a:	a0 81       	ld	r26, Z
 d6c:	b1 81       	ldd	r27, Z+1	; 0x01
 d6e:	9d 01       	movw	r18, r26
 d70:	2f 5f       	subi	r18, 0xFF	; 255
 d72:	3f 4f       	sbci	r19, 0xFF	; 255
 d74:	31 83       	std	Z+1, r19	; 0x01
 d76:	20 83       	st	Z, r18
 d78:	8c 93       	st	X, r24
 d7a:	26 81       	ldd	r18, Z+6	; 0x06
 d7c:	37 81       	ldd	r19, Z+7	; 0x07
 d7e:	2f 5f       	subi	r18, 0xFF	; 255
 d80:	3f 4f       	sbci	r19, 0xFF	; 255
 d82:	37 83       	std	Z+7, r19	; 0x07
 d84:	26 83       	std	Z+6, r18	; 0x06
 d86:	14 c0       	rjmp	.+40     	; 0xdb0 <fputc+0x6e>
 d88:	8b 01       	movw	r16, r22
 d8a:	ec 01       	movw	r28, r24
 d8c:	fb 01       	movw	r30, r22
 d8e:	00 84       	ldd	r0, Z+8	; 0x08
 d90:	f1 85       	ldd	r31, Z+9	; 0x09
 d92:	e0 2d       	mov	r30, r0
 d94:	19 95       	eicall
 d96:	89 2b       	or	r24, r25
 d98:	e1 f6       	brne	.-72     	; 0xd52 <fputc+0x10>
 d9a:	d8 01       	movw	r26, r16
 d9c:	16 96       	adiw	r26, 0x06	; 6
 d9e:	8d 91       	ld	r24, X+
 da0:	9c 91       	ld	r25, X
 da2:	17 97       	sbiw	r26, 0x07	; 7
 da4:	01 96       	adiw	r24, 0x01	; 1
 da6:	17 96       	adiw	r26, 0x07	; 7
 da8:	9c 93       	st	X, r25
 daa:	8e 93       	st	-X, r24
 dac:	16 97       	sbiw	r26, 0x06	; 6
 dae:	ce 01       	movw	r24, r28
 db0:	df 91       	pop	r29
 db2:	cf 91       	pop	r28
 db4:	1f 91       	pop	r17
 db6:	0f 91       	pop	r16
 db8:	08 95       	ret

00000dba <__ultoa_invert>:
 dba:	fa 01       	movw	r30, r20
 dbc:	aa 27       	eor	r26, r26
 dbe:	28 30       	cpi	r18, 0x08	; 8
 dc0:	51 f1       	breq	.+84     	; 0xe16 <__ultoa_invert+0x5c>
 dc2:	20 31       	cpi	r18, 0x10	; 16
 dc4:	81 f1       	breq	.+96     	; 0xe26 <__ultoa_invert+0x6c>
 dc6:	e8 94       	clt
 dc8:	6f 93       	push	r22
 dca:	6e 7f       	andi	r22, 0xFE	; 254
 dcc:	6e 5f       	subi	r22, 0xFE	; 254
 dce:	7f 4f       	sbci	r23, 0xFF	; 255
 dd0:	8f 4f       	sbci	r24, 0xFF	; 255
 dd2:	9f 4f       	sbci	r25, 0xFF	; 255
 dd4:	af 4f       	sbci	r26, 0xFF	; 255
 dd6:	b1 e0       	ldi	r27, 0x01	; 1
 dd8:	3e d0       	rcall	.+124    	; 0xe56 <__ultoa_invert+0x9c>
 dda:	b4 e0       	ldi	r27, 0x04	; 4
 ddc:	3c d0       	rcall	.+120    	; 0xe56 <__ultoa_invert+0x9c>
 dde:	67 0f       	add	r22, r23
 de0:	78 1f       	adc	r23, r24
 de2:	89 1f       	adc	r24, r25
 de4:	9a 1f       	adc	r25, r26
 de6:	a1 1d       	adc	r26, r1
 de8:	68 0f       	add	r22, r24
 dea:	79 1f       	adc	r23, r25
 dec:	8a 1f       	adc	r24, r26
 dee:	91 1d       	adc	r25, r1
 df0:	a1 1d       	adc	r26, r1
 df2:	6a 0f       	add	r22, r26
 df4:	71 1d       	adc	r23, r1
 df6:	81 1d       	adc	r24, r1
 df8:	91 1d       	adc	r25, r1
 dfa:	a1 1d       	adc	r26, r1
 dfc:	20 d0       	rcall	.+64     	; 0xe3e <__ultoa_invert+0x84>
 dfe:	09 f4       	brne	.+2      	; 0xe02 <__ultoa_invert+0x48>
 e00:	68 94       	set
 e02:	3f 91       	pop	r19
 e04:	2a e0       	ldi	r18, 0x0A	; 10
 e06:	26 9f       	mul	r18, r22
 e08:	11 24       	eor	r1, r1
 e0a:	30 19       	sub	r19, r0
 e0c:	30 5d       	subi	r19, 0xD0	; 208
 e0e:	31 93       	st	Z+, r19
 e10:	de f6       	brtc	.-74     	; 0xdc8 <__ultoa_invert+0xe>
 e12:	cf 01       	movw	r24, r30
 e14:	08 95       	ret
 e16:	46 2f       	mov	r20, r22
 e18:	47 70       	andi	r20, 0x07	; 7
 e1a:	40 5d       	subi	r20, 0xD0	; 208
 e1c:	41 93       	st	Z+, r20
 e1e:	b3 e0       	ldi	r27, 0x03	; 3
 e20:	0f d0       	rcall	.+30     	; 0xe40 <__ultoa_invert+0x86>
 e22:	c9 f7       	brne	.-14     	; 0xe16 <__ultoa_invert+0x5c>
 e24:	f6 cf       	rjmp	.-20     	; 0xe12 <__ultoa_invert+0x58>
 e26:	46 2f       	mov	r20, r22
 e28:	4f 70       	andi	r20, 0x0F	; 15
 e2a:	40 5d       	subi	r20, 0xD0	; 208
 e2c:	4a 33       	cpi	r20, 0x3A	; 58
 e2e:	18 f0       	brcs	.+6      	; 0xe36 <__ultoa_invert+0x7c>
 e30:	49 5d       	subi	r20, 0xD9	; 217
 e32:	31 fd       	sbrc	r19, 1
 e34:	40 52       	subi	r20, 0x20	; 32
 e36:	41 93       	st	Z+, r20
 e38:	02 d0       	rcall	.+4      	; 0xe3e <__ultoa_invert+0x84>
 e3a:	a9 f7       	brne	.-22     	; 0xe26 <__ultoa_invert+0x6c>
 e3c:	ea cf       	rjmp	.-44     	; 0xe12 <__ultoa_invert+0x58>
 e3e:	b4 e0       	ldi	r27, 0x04	; 4
 e40:	a6 95       	lsr	r26
 e42:	97 95       	ror	r25
 e44:	87 95       	ror	r24
 e46:	77 95       	ror	r23
 e48:	67 95       	ror	r22
 e4a:	ba 95       	dec	r27
 e4c:	c9 f7       	brne	.-14     	; 0xe40 <__ultoa_invert+0x86>
 e4e:	00 97       	sbiw	r24, 0x00	; 0
 e50:	61 05       	cpc	r22, r1
 e52:	71 05       	cpc	r23, r1
 e54:	08 95       	ret
 e56:	9b 01       	movw	r18, r22
 e58:	ac 01       	movw	r20, r24
 e5a:	0a 2e       	mov	r0, r26
 e5c:	06 94       	lsr	r0
 e5e:	57 95       	ror	r21
 e60:	47 95       	ror	r20
 e62:	37 95       	ror	r19
 e64:	27 95       	ror	r18
 e66:	ba 95       	dec	r27
 e68:	c9 f7       	brne	.-14     	; 0xe5c <__ultoa_invert+0xa2>
 e6a:	62 0f       	add	r22, r18
 e6c:	73 1f       	adc	r23, r19
 e6e:	84 1f       	adc	r24, r20
 e70:	95 1f       	adc	r25, r21
 e72:	a0 1d       	adc	r26, r0
 e74:	08 95       	ret

00000e76 <_exit>:
 e76:	f8 94       	cli

00000e78 <__stop_program>:
 e78:	ff cf       	rjmp	.-2      	; 0xe78 <__stop_program>
