
Project_MEGA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  0000068a  000006fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000068a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000712  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000744  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001972  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010ab  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bf2  00000000  00000000  00003291  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  00003e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000073a  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a75  00000000  00000000  0000479a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000520f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
   2:	00 00       	nop
   4:	fe c0       	rjmp	.+508    	; 0x202 <__bad_interrupt>
   6:	00 00       	nop
   8:	fc c0       	rjmp	.+504    	; 0x202 <__bad_interrupt>
   a:	00 00       	nop
   c:	fa c0       	rjmp	.+500    	; 0x202 <__bad_interrupt>
   e:	00 00       	nop
  10:	f8 c0       	rjmp	.+496    	; 0x202 <__bad_interrupt>
  12:	00 00       	nop
  14:	f6 c0       	rjmp	.+492    	; 0x202 <__bad_interrupt>
  16:	00 00       	nop
  18:	f4 c0       	rjmp	.+488    	; 0x202 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	f2 c0       	rjmp	.+484    	; 0x202 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f0 c0       	rjmp	.+480    	; 0x202 <__bad_interrupt>
  22:	00 00       	nop
  24:	ee c0       	rjmp	.+476    	; 0x202 <__bad_interrupt>
  26:	00 00       	nop
  28:	ec c0       	rjmp	.+472    	; 0x202 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	ea c0       	rjmp	.+468    	; 0x202 <__bad_interrupt>
  2e:	00 00       	nop
  30:	e8 c0       	rjmp	.+464    	; 0x202 <__bad_interrupt>
  32:	00 00       	nop
  34:	e6 c0       	rjmp	.+460    	; 0x202 <__bad_interrupt>
  36:	00 00       	nop
  38:	e4 c0       	rjmp	.+456    	; 0x202 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	e2 c0       	rjmp	.+452    	; 0x202 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e0 c0       	rjmp	.+448    	; 0x202 <__bad_interrupt>
  42:	00 00       	nop
  44:	de c0       	rjmp	.+444    	; 0x202 <__bad_interrupt>
  46:	00 00       	nop
  48:	dc c0       	rjmp	.+440    	; 0x202 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	da c0       	rjmp	.+436    	; 0x202 <__bad_interrupt>
  4e:	00 00       	nop
  50:	d8 c0       	rjmp	.+432    	; 0x202 <__bad_interrupt>
  52:	00 00       	nop
  54:	d6 c0       	rjmp	.+428    	; 0x202 <__bad_interrupt>
  56:	00 00       	nop
  58:	d4 c0       	rjmp	.+424    	; 0x202 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	d2 c0       	rjmp	.+420    	; 0x202 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d0 c0       	rjmp	.+416    	; 0x202 <__bad_interrupt>
  62:	00 00       	nop
  64:	ce c0       	rjmp	.+412    	; 0x202 <__bad_interrupt>
  66:	00 00       	nop
  68:	cc c0       	rjmp	.+408    	; 0x202 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ca c0       	rjmp	.+404    	; 0x202 <__bad_interrupt>
  6e:	00 00       	nop
  70:	c8 c0       	rjmp	.+400    	; 0x202 <__bad_interrupt>
  72:	00 00       	nop
  74:	c6 c0       	rjmp	.+396    	; 0x202 <__bad_interrupt>
  76:	00 00       	nop
  78:	c4 c0       	rjmp	.+392    	; 0x202 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	c2 c0       	rjmp	.+388    	; 0x202 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c0 c0       	rjmp	.+384    	; 0x202 <__bad_interrupt>
  82:	00 00       	nop
  84:	be c0       	rjmp	.+380    	; 0x202 <__bad_interrupt>
  86:	00 00       	nop
  88:	bc c0       	rjmp	.+376    	; 0x202 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ba c0       	rjmp	.+372    	; 0x202 <__bad_interrupt>
  8e:	00 00       	nop
  90:	b8 c0       	rjmp	.+368    	; 0x202 <__bad_interrupt>
  92:	00 00       	nop
  94:	b6 c0       	rjmp	.+364    	; 0x202 <__bad_interrupt>
  96:	00 00       	nop
  98:	b4 c0       	rjmp	.+360    	; 0x202 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	b2 c0       	rjmp	.+356    	; 0x202 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b0 c0       	rjmp	.+352    	; 0x202 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	ae c0       	rjmp	.+348    	; 0x202 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	ac c0       	rjmp	.+344    	; 0x202 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	aa c0       	rjmp	.+340    	; 0x202 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	a8 c0       	rjmp	.+336    	; 0x202 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	a6 c0       	rjmp	.+332    	; 0x202 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	a4 c0       	rjmp	.+328    	; 0x202 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	a2 c0       	rjmp	.+324    	; 0x202 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a0 c0       	rjmp	.+320    	; 0x202 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	9e c0       	rjmp	.+316    	; 0x202 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	9c c0       	rjmp	.+312    	; 0x202 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	9a c0       	rjmp	.+308    	; 0x202 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	98 c0       	rjmp	.+304    	; 0x202 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	96 c0       	rjmp	.+300    	; 0x202 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	94 c0       	rjmp	.+296    	; 0x202 <__bad_interrupt>
  da:	00 00       	nop
  dc:	92 c0       	rjmp	.+292    	; 0x202 <__bad_interrupt>
  de:	00 00       	nop
  e0:	90 c0       	rjmp	.+288    	; 0x202 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	77 01       	movw	r14, r14
  e6:	7f 01       	movw	r14, r30
  e8:	7f 01       	movw	r14, r30
  ea:	7f 01       	movw	r14, r30
  ec:	79 01       	movw	r14, r18
  ee:	7f 01       	movw	r14, r30
  f0:	7b 01       	movw	r14, r22
  f2:	7d 01       	movw	r14, r26
  f4:	7f 01       	movw	r14, r30
  f6:	7f 01       	movw	r14, r30
  f8:	7f 01       	movw	r14, r30
  fa:	7f 01       	movw	r14, r30
  fc:	7f 01       	movw	r14, r30
  fe:	7f 01       	movw	r14, r30
 100:	7f 01       	movw	r14, r30
 102:	7f 01       	movw	r14, r30
 104:	7f 01       	movw	r14, r30
 106:	7f 01       	movw	r14, r30
 108:	7f 01       	movw	r14, r30
 10a:	7f 01       	movw	r14, r30
 10c:	7f 01       	movw	r14, r30
 10e:	7f 01       	movw	r14, r30
 110:	7f 01       	movw	r14, r30
 112:	7f 01       	movw	r14, r30
 114:	7f 01       	movw	r14, r30
 116:	7f 01       	movw	r14, r30
 118:	7f 01       	movw	r14, r30
 11a:	7f 01       	movw	r14, r30
 11c:	7f 01       	movw	r14, r30
 11e:	7f 01       	movw	r14, r30
 120:	7f 01       	movw	r14, r30
 122:	7f 01       	movw	r14, r30
 124:	7f 01       	movw	r14, r30
 126:	7f 01       	movw	r14, r30
 128:	7f 01       	movw	r14, r30
 12a:	7f 01       	movw	r14, r30
 12c:	7f 01       	movw	r14, r30
 12e:	7f 01       	movw	r14, r30
 130:	7f 01       	movw	r14, r30
 132:	7f 01       	movw	r14, r30
 134:	7f 01       	movw	r14, r30
 136:	7f 01       	movw	r14, r30
 138:	7f 01       	movw	r14, r30
 13a:	7f 01       	movw	r14, r30
 13c:	7f 01       	movw	r14, r30
 13e:	7f 01       	movw	r14, r30
 140:	7f 01       	movw	r14, r30
 142:	7f 01       	movw	r14, r30
 144:	7f 01       	movw	r14, r30
 146:	7f 01       	movw	r14, r30
 148:	7f 01       	movw	r14, r30
 14a:	7f 01       	movw	r14, r30
 14c:	7f 01       	movw	r14, r30
 14e:	7f 01       	movw	r14, r30
 150:	7f 01       	movw	r14, r30
 152:	7f 01       	movw	r14, r30
 154:	7f 01       	movw	r14, r30
 156:	7f 01       	movw	r14, r30
 158:	7f 01       	movw	r14, r30
 15a:	7f 01       	movw	r14, r30
 15c:	7f 01       	movw	r14, r30
 15e:	7f 01       	movw	r14, r30
 160:	7f 01       	movw	r14, r30
 162:	7f 01       	movw	r14, r30
 164:	6f 01       	movw	r12, r30
 166:	7f 01       	movw	r14, r30
 168:	7f 01       	movw	r14, r30
 16a:	7f 01       	movw	r14, r30
 16c:	71 01       	movw	r14, r2
 16e:	7f 01       	movw	r14, r30
 170:	73 01       	movw	r14, r6
 172:	75 01       	movw	r14, r10
 174:	7f 01       	movw	r14, r30
 176:	7f 01       	movw	r14, r30
 178:	7f 01       	movw	r14, r30
 17a:	7f 01       	movw	r14, r30
 17c:	7f 01       	movw	r14, r30
 17e:	7f 01       	movw	r14, r30
 180:	7f 01       	movw	r14, r30
 182:	7f 01       	movw	r14, r30
 184:	7f 01       	movw	r14, r30
 186:	7f 01       	movw	r14, r30
 188:	7f 01       	movw	r14, r30
 18a:	7f 01       	movw	r14, r30
 18c:	7f 01       	movw	r14, r30
 18e:	7f 01       	movw	r14, r30
 190:	7f 01       	movw	r14, r30
 192:	7f 01       	movw	r14, r30
 194:	7f 01       	movw	r14, r30
 196:	7f 01       	movw	r14, r30
 198:	7f 01       	movw	r14, r30
 19a:	7f 01       	movw	r14, r30
 19c:	7f 01       	movw	r14, r30
 19e:	7f 01       	movw	r14, r30
 1a0:	7f 01       	movw	r14, r30
 1a2:	7f 01       	movw	r14, r30
 1a4:	67 01       	movw	r12, r14
 1a6:	7f 01       	movw	r14, r30
 1a8:	7f 01       	movw	r14, r30
 1aa:	7f 01       	movw	r14, r30
 1ac:	69 01       	movw	r12, r18
 1ae:	7f 01       	movw	r14, r30
 1b0:	6b 01       	movw	r12, r22
 1b2:	6d 01       	movw	r12, r26
 1b4:	7f 01       	movw	r14, r30
 1b6:	7f 01       	movw	r14, r30
 1b8:	7f 01       	movw	r14, r30
 1ba:	7f 01       	movw	r14, r30
 1bc:	7f 01       	movw	r14, r30
 1be:	7f 01       	movw	r14, r30
 1c0:	7f 01       	movw	r14, r30
 1c2:	7f 01       	movw	r14, r30
 1c4:	61 01       	movw	r12, r2
 1c6:	7f 01       	movw	r14, r30
 1c8:	7f 01       	movw	r14, r30
 1ca:	7f 01       	movw	r14, r30
 1cc:	81 01       	movw	r16, r2
 1ce:	7f 01       	movw	r14, r30
 1d0:	63 01       	movw	r12, r6
 1d2:	65 01       	movw	r12, r10

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	d1 e2       	ldi	r29, 0x21	; 33
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
 1e4:	12 e0       	ldi	r17, 0x02	; 2
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	ea e8       	ldi	r30, 0x8A	; 138
 1ec:	f6 e0       	ldi	r31, 0x06	; 6
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0b bf       	out	0x3b, r16	; 59
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
 1f4:	07 90       	elpm	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	a4 31       	cpi	r26, 0x14	; 20
 1fa:	b1 07       	cpc	r27, r17
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>
 1fe:	dc d1       	rcall	.+952    	; 0x5b8 <main>
 200:	42 c2       	rjmp	.+1156   	; 0x686 <_exit>

00000202 <__bad_interrupt>:
 202:	fe ce       	rjmp	.-516    	; 0x0 <__vectors>

00000204 <keypad_ScanKey>:
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 204:	20 e0       	ldi	r18, 0x00	; 0
        4.Return the ScanCode(Combination of ROW & COL) for decoding the key.
 ***************************************************************************************************/
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;
 206:	9f ee       	ldi	r25, 0xEF	; 239

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 208:	10 c0       	rjmp	.+32     	; 0x22a <keypad_ScanKey+0x26>
	{
		M_ROW=var_keyScanCode_u8;        // Select 1-Row at a time for Scanning the Key
 20a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	e9 ef       	ldi	r30, 0xF9	; 249
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <keypad_ScanKey+0xe>
 216:	00 c0       	rjmp	.+0      	; 0x218 <keypad_ScanKey+0x14>
 218:	00 00       	nop
		DELAY_ms(1);
		var_keyPress_u8=M_COL & 0x0F;    // Read the Column, for key press
 21a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 21e:	8f 70       	andi	r24, 0x0F	; 15

		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
 220:	8f 30       	cpi	r24, 0x0F	; 15
 222:	29 f4       	brne	.+10     	; 0x22e <keypad_ScanKey+0x2a>
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
 224:	99 0f       	add	r25, r25
 226:	9f 5f       	subi	r25, 0xFF	; 255
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 228:	2f 5f       	subi	r18, 0xFF	; 255
 22a:	24 30       	cpi	r18, 0x04	; 4
 22c:	70 f3       	brcs	.-36     	; 0x20a <keypad_ScanKey+0x6>
		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
	}
	var_keyPress_u8 = var_keyPress_u8 + (var_keyScanCode_u8 & 0xf0); // Return the row and COL status to decode the key
 22e:	90 7f       	andi	r25, 0xF0	; 240
	return(var_keyPress_u8);
}
 230:	89 0f       	add	r24, r25
 232:	08 95       	ret

00000234 <KEYPAD_Init>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
 234:	80 ef       	ldi	r24, 0xF0	; 240
 236:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 23a:	08 95       	ret

0000023c <KEYPAD_WaitForKeyRelease>:
	uint8_t key;
	do
	{
		do
		{
			M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 23c:	8f e0       	ldi	r24, 0x0F	; 15
 23e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			key=M_COL & 0x0F;     // Read the Columns, to check the key press
 242:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 246:	8f 70       	andi	r24, 0x0F	; 15
		}while(key!=0x0F);
 248:	8f 30       	cpi	r24, 0x0F	; 15
 24a:	c1 f7       	brne	.-16     	; 0x23c <KEYPAD_WaitForKeyRelease>
 24c:	89 ef       	ldi	r24, 0xF9	; 249
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <KEYPAD_WaitForKeyRelease+0x14>
 254:	00 c0       	rjmp	.+0      	; 0x256 <KEYPAD_WaitForKeyRelease+0x1a>
 256:	00 00       	nop

		DELAY_ms(1);

		M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 258:	8f e0       	ldi	r24, 0x0F	; 15
 25a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		key=M_COL & 0x0F;     // Read the Columns, to check the key press
 25e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 262:	8f 70       	andi	r24, 0x0F	; 15
	}while(key!=0x0F);   // Wait till the Key is released,
 264:	8f 30       	cpi	r24, 0x0F	; 15
 266:	51 f7       	brne	.-44     	; 0x23c <KEYPAD_WaitForKeyRelease>
	                     // If no Key is pressed, Column lines will be High(0x0F)
}
 268:	08 95       	ret

0000026a <KEYPAD_WaitForKeyPress>:
	uint8_t var_keyPress_u8;
	do
	{
		do
		{
			M_ROW=0x0F;		  // Pull the ROW lines to low and Column lines high.
 26a:	8f e0       	ldi	r24, 0x0F	; 15
 26c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			var_keyPress_u8=M_COL & 0x0F;	  // Read the Columns, to check the key press
 270:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 274:	8f 70       	andi	r24, 0x0F	; 15
		}while(var_keyPress_u8==0x0F); // Wait till the Key is pressed,
 276:	8f 30       	cpi	r24, 0x0F	; 15
 278:	c1 f3       	breq	.-16     	; 0x26a <KEYPAD_WaitForKeyPress>
 27a:	89 ef       	ldi	r24, 0xF9	; 249
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <KEYPAD_WaitForKeyPress+0x14>
 282:	00 c0       	rjmp	.+0      	; 0x284 <KEYPAD_WaitForKeyPress+0x1a>
 284:	00 00       	nop
		// if a Key is pressed the corresponding Column line go low

		DELAY_ms(1);		  // Wait for some time(debounce Time);

		M_ROW=0x0F;		  // After debounce time, perform the above operation
 286:	8f e0       	ldi	r24, 0x0F	; 15
 288:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.
 28c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 290:	8f 70       	andi	r24, 0x0F	; 15

	}while(var_keyPress_u8==0x0F);
 292:	8f 30       	cpi	r24, 0x0F	; 15
 294:	51 f3       	breq	.-44     	; 0x26a <KEYPAD_WaitForKeyPress>
}
 296:	08 95       	ret

00000298 <KEYPAD_GetKey>:
 ***************************************************************************************************/
uint8_t KEYPAD_GetKey()
{
	uint8_t var_keyPress_u8;

	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
 298:	d1 df       	rcall	.-94     	; 0x23c <KEYPAD_WaitForKeyRelease>
 29a:	89 ef       	ldi	r24, 0xF9	; 249
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <KEYPAD_GetKey+0x6>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <KEYPAD_GetKey+0xc>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
 2a4:	00 00       	nop
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
 2a6:	e1 df       	rcall	.-62     	; 0x26a <KEYPAD_WaitForKeyPress>
 2a8:	ad df       	rcall	.-166    	; 0x204 <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	fc 01       	movw	r30, r24
 2ae:	e7 57       	subi	r30, 0x77	; 119
 2b0:	f1 09       	sbc	r31, r1
 2b2:	e8 37       	cpi	r30, 0x78	; 120
 2b4:	f1 05       	cpc	r31, r1
 2b6:	18 f5       	brcc	.+70     	; 0x2fe <KEYPAD_GetKey+0x66>
 2b8:	88 27       	eor	r24, r24
 2ba:	ee 58       	subi	r30, 0x8E	; 142
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	8f 4f       	sbci	r24, 0xFF	; 255
 2c0:	a7 c1       	rjmp	.+846    	; 0x610 <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
 2c2:	8a e2       	ldi	r24, 0x2A	; 42
 2c4:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
 2c6:	84 e3       	ldi	r24, 0x34	; 52
 2c8:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
 2ca:	81 e3       	ldi	r24, 0x31	; 49
 2cc:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
 2ce:	80 e3       	ldi	r24, 0x30	; 48
 2d0:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
 2d2:	88 e3       	ldi	r24, 0x38	; 56
 2d4:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
 2d6:	85 e3       	ldi	r24, 0x35	; 53
 2d8:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
 2da:	82 e3       	ldi	r24, 0x32	; 50
 2dc:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
 2de:	83 e2       	ldi	r24, 0x23	; 35
 2e0:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
 2e2:	89 e3       	ldi	r24, 0x39	; 57
 2e4:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
 2e6:	86 e3       	ldi	r24, 0x36	; 54
 2e8:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
 2ea:	83 e3       	ldi	r24, 0x33	; 51
 2ec:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
 2ee:	84 e4       	ldi	r24, 0x44	; 68
 2f0:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
 2f2:	83 e4       	ldi	r24, 0x43	; 67
 2f4:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
 2f6:	82 e4       	ldi	r24, 0x42	; 66
 2f8:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
 2fa:	81 e4       	ldi	r24, 0x41	; 65
 2fc:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
 2fe:	8a e7       	ldi	r24, 0x7A	; 122
 300:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
 302:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
 304:	08 95       	ret

00000306 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 306:	85 b1       	in	r24, 0x05	; 5
 308:	80 62       	ori	r24, 0x20	; 32
 30a:	85 b9       	out	0x05, r24	; 5
 30c:	00 00       	nop
 30e:	85 b1       	in	r24, 0x05	; 5
 310:	8f 7d       	andi	r24, 0xDF	; 223
 312:	85 b9       	out	0x05, r24	; 5
 314:	08 95       	ret

00000316 <lcd_write>:
 316:	cf 93       	push	r28
 318:	c8 2f       	mov	r28, r24
 31a:	66 23       	and	r22, r22
 31c:	31 f0       	breq	.+12     	; 0x32a <lcd_write+0x14>
 31e:	e2 e0       	ldi	r30, 0x02	; 2
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	80 81       	ld	r24, Z
 324:	80 64       	ori	r24, 0x40	; 64
 326:	80 83       	st	Z, r24
 328:	05 c0       	rjmp	.+10     	; 0x334 <lcd_write+0x1e>
 32a:	e2 e0       	ldi	r30, 0x02	; 2
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	80 81       	ld	r24, Z
 330:	8f 7b       	andi	r24, 0xBF	; 191
 332:	80 83       	st	Z, r24
 334:	85 b1       	in	r24, 0x05	; 5
 336:	8f 7e       	andi	r24, 0xEF	; 239
 338:	85 b9       	out	0x05, r24	; 5
 33a:	8d b1       	in	r24, 0x0d	; 13
 33c:	80 62       	ori	r24, 0x20	; 32
 33e:	8d b9       	out	0x0d, r24	; 13
 340:	83 b3       	in	r24, 0x13	; 19
 342:	80 62       	ori	r24, 0x20	; 32
 344:	83 bb       	out	0x13, r24	; 19
 346:	8d b1       	in	r24, 0x0d	; 13
 348:	88 60       	ori	r24, 0x08	; 8
 34a:	8d b9       	out	0x0d, r24	; 13
 34c:	e1 e0       	ldi	r30, 0x01	; 1
 34e:	f1 e0       	ldi	r31, 0x01	; 1
 350:	80 81       	ld	r24, Z
 352:	88 60       	ori	r24, 0x08	; 8
 354:	80 83       	st	Z, r24
 356:	e2 e0       	ldi	r30, 0x02	; 2
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	80 81       	ld	r24, Z
 35c:	87 7f       	andi	r24, 0xF7	; 247
 35e:	80 83       	st	Z, r24
 360:	8e b1       	in	r24, 0x0e	; 14
 362:	87 7f       	andi	r24, 0xF7	; 247
 364:	8e b9       	out	0x0e, r24	; 14
 366:	84 b3       	in	r24, 0x14	; 20
 368:	8f 7d       	andi	r24, 0xDF	; 223
 36a:	84 bb       	out	0x14, r24	; 20
 36c:	8e b1       	in	r24, 0x0e	; 14
 36e:	8f 7d       	andi	r24, 0xDF	; 223
 370:	8e b9       	out	0x0e, r24	; 14
 372:	cc 23       	and	r28, r28
 374:	1c f4       	brge	.+6      	; 0x37c <lcd_write+0x66>
 376:	80 81       	ld	r24, Z
 378:	88 60       	ori	r24, 0x08	; 8
 37a:	80 83       	st	Z, r24
 37c:	c6 ff       	sbrs	r28, 6
 37e:	03 c0       	rjmp	.+6      	; 0x386 <lcd_write+0x70>
 380:	8e b1       	in	r24, 0x0e	; 14
 382:	88 60       	ori	r24, 0x08	; 8
 384:	8e b9       	out	0x0e, r24	; 14
 386:	c5 ff       	sbrs	r28, 5
 388:	03 c0       	rjmp	.+6      	; 0x390 <lcd_write+0x7a>
 38a:	84 b3       	in	r24, 0x14	; 20
 38c:	80 62       	ori	r24, 0x20	; 32
 38e:	84 bb       	out	0x14, r24	; 20
 390:	c4 ff       	sbrs	r28, 4
 392:	03 c0       	rjmp	.+6      	; 0x39a <lcd_write+0x84>
 394:	8e b1       	in	r24, 0x0e	; 14
 396:	80 62       	ori	r24, 0x20	; 32
 398:	8e b9       	out	0x0e, r24	; 14
 39a:	b5 df       	rcall	.-150    	; 0x306 <toggle_e>
 39c:	e2 e0       	ldi	r30, 0x02	; 2
 39e:	f1 e0       	ldi	r31, 0x01	; 1
 3a0:	80 81       	ld	r24, Z
 3a2:	87 7f       	andi	r24, 0xF7	; 247
 3a4:	80 83       	st	Z, r24
 3a6:	8e b1       	in	r24, 0x0e	; 14
 3a8:	87 7f       	andi	r24, 0xF7	; 247
 3aa:	8e b9       	out	0x0e, r24	; 14
 3ac:	84 b3       	in	r24, 0x14	; 20
 3ae:	8f 7d       	andi	r24, 0xDF	; 223
 3b0:	84 bb       	out	0x14, r24	; 20
 3b2:	8e b1       	in	r24, 0x0e	; 14
 3b4:	8f 7d       	andi	r24, 0xDF	; 223
 3b6:	8e b9       	out	0x0e, r24	; 14
 3b8:	c3 ff       	sbrs	r28, 3
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <lcd_write+0xac>
 3bc:	80 81       	ld	r24, Z
 3be:	88 60       	ori	r24, 0x08	; 8
 3c0:	80 83       	st	Z, r24
 3c2:	c2 ff       	sbrs	r28, 2
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <lcd_write+0xb6>
 3c6:	8e b1       	in	r24, 0x0e	; 14
 3c8:	88 60       	ori	r24, 0x08	; 8
 3ca:	8e b9       	out	0x0e, r24	; 14
 3cc:	c1 ff       	sbrs	r28, 1
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <lcd_write+0xc0>
 3d0:	84 b3       	in	r24, 0x14	; 20
 3d2:	80 62       	ori	r24, 0x20	; 32
 3d4:	84 bb       	out	0x14, r24	; 20
 3d6:	c0 ff       	sbrs	r28, 0
 3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <lcd_write+0xca>
 3da:	8e b1       	in	r24, 0x0e	; 14
 3dc:	80 62       	ori	r24, 0x20	; 32
 3de:	8e b9       	out	0x0e, r24	; 14
 3e0:	92 df       	rcall	.-220    	; 0x306 <toggle_e>
 3e2:	8e b1       	in	r24, 0x0e	; 14
 3e4:	80 62       	ori	r24, 0x20	; 32
 3e6:	8e b9       	out	0x0e, r24	; 14
 3e8:	84 b3       	in	r24, 0x14	; 20
 3ea:	80 62       	ori	r24, 0x20	; 32
 3ec:	84 bb       	out	0x14, r24	; 20
 3ee:	8e b1       	in	r24, 0x0e	; 14
 3f0:	88 60       	ori	r24, 0x08	; 8
 3f2:	8e b9       	out	0x0e, r24	; 14
 3f4:	e2 e0       	ldi	r30, 0x02	; 2
 3f6:	f1 e0       	ldi	r31, 0x01	; 1
 3f8:	80 81       	ld	r24, Z
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	80 83       	st	Z, r24
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <lcd_read>:
 402:	88 23       	and	r24, r24
 404:	31 f0       	breq	.+12     	; 0x412 <lcd_read+0x10>
 406:	e2 e0       	ldi	r30, 0x02	; 2
 408:	f1 e0       	ldi	r31, 0x01	; 1
 40a:	80 81       	ld	r24, Z
 40c:	80 64       	ori	r24, 0x40	; 64
 40e:	80 83       	st	Z, r24
 410:	05 c0       	rjmp	.+10     	; 0x41c <lcd_read+0x1a>
 412:	e2 e0       	ldi	r30, 0x02	; 2
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	80 81       	ld	r24, Z
 418:	8f 7b       	andi	r24, 0xBF	; 191
 41a:	80 83       	st	Z, r24
 41c:	85 b1       	in	r24, 0x05	; 5
 41e:	80 61       	ori	r24, 0x10	; 16
 420:	85 b9       	out	0x05, r24	; 5
 422:	8d b1       	in	r24, 0x0d	; 13
 424:	8f 7d       	andi	r24, 0xDF	; 223
 426:	8d b9       	out	0x0d, r24	; 13
 428:	83 b3       	in	r24, 0x13	; 19
 42a:	8f 7d       	andi	r24, 0xDF	; 223
 42c:	83 bb       	out	0x13, r24	; 19
 42e:	8d b1       	in	r24, 0x0d	; 13
 430:	87 7f       	andi	r24, 0xF7	; 247
 432:	8d b9       	out	0x0d, r24	; 13
 434:	e1 e0       	ldi	r30, 0x01	; 1
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	80 81       	ld	r24, Z
 43a:	87 7f       	andi	r24, 0xF7	; 247
 43c:	80 83       	st	Z, r24
 43e:	85 b1       	in	r24, 0x05	; 5
 440:	80 62       	ori	r24, 0x20	; 32
 442:	85 b9       	out	0x05, r24	; 5
 444:	00 00       	nop
 446:	65 99       	sbic	0x0c, 5	; 12
 448:	02 c0       	rjmp	.+4      	; 0x44e <lcd_read+0x4c>
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	01 c0       	rjmp	.+2      	; 0x450 <lcd_read+0x4e>
 44e:	80 e1       	ldi	r24, 0x10	; 16
 450:	95 99       	sbic	0x12, 5	; 18
 452:	80 62       	ori	r24, 0x20	; 32
 454:	63 99       	sbic	0x0c, 3	; 12
 456:	80 64       	ori	r24, 0x40	; 64
 458:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 45c:	93 fd       	sbrc	r25, 3
 45e:	80 68       	ori	r24, 0x80	; 128
 460:	95 b1       	in	r25, 0x05	; 5
 462:	9f 7d       	andi	r25, 0xDF	; 223
 464:	95 b9       	out	0x05, r25	; 5
 466:	00 00       	nop
 468:	95 b1       	in	r25, 0x05	; 5
 46a:	90 62       	ori	r25, 0x20	; 32
 46c:	95 b9       	out	0x05, r25	; 5
 46e:	00 00       	nop
 470:	65 99       	sbic	0x0c, 5	; 12
 472:	81 60       	ori	r24, 0x01	; 1
 474:	95 99       	sbic	0x12, 5	; 18
 476:	82 60       	ori	r24, 0x02	; 2
 478:	63 99       	sbic	0x0c, 3	; 12
 47a:	84 60       	ori	r24, 0x04	; 4
 47c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 480:	93 fd       	sbrc	r25, 3
 482:	88 60       	ori	r24, 0x08	; 8
 484:	95 b1       	in	r25, 0x05	; 5
 486:	9f 7d       	andi	r25, 0xDF	; 223
 488:	95 b9       	out	0x05, r25	; 5
 48a:	08 95       	ret

0000048c <lcd_waitbusy>:
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	b9 df       	rcall	.-142    	; 0x402 <lcd_read>
 490:	88 23       	and	r24, r24
 492:	e4 f3       	brlt	.-8      	; 0x48c <lcd_waitbusy>
 494:	00 c0       	rjmp	.+0      	; 0x496 <lcd_waitbusy+0xa>
 496:	00 c0       	rjmp	.+0      	; 0x498 <lcd_waitbusy+0xc>
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	b3 cf       	rjmp	.-154    	; 0x402 <lcd_read>
 49c:	08 95       	ret

0000049e <lcd_command>:
 49e:	cf 93       	push	r28
 4a0:	c8 2f       	mov	r28, r24
 4a2:	f4 df       	rcall	.-24     	; 0x48c <lcd_waitbusy>
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	8c 2f       	mov	r24, r28
 4a8:	36 df       	rcall	.-404    	; 0x316 <lcd_write>
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <lcd_gotoxy>:
 4ae:	61 11       	cpse	r22, r1
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <lcd_gotoxy+0xa>
 4b2:	80 58       	subi	r24, 0x80	; 128
 4b4:	f4 cf       	rjmp	.-24     	; 0x49e <lcd_command>
 4b6:	08 95       	ret
 4b8:	80 54       	subi	r24, 0x40	; 64
 4ba:	f1 cf       	rjmp	.-30     	; 0x49e <lcd_command>
 4bc:	08 95       	ret

000004be <lcd_clrscr>:
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	ee cf       	rjmp	.-36     	; 0x49e <lcd_command>
 4c2:	08 95       	ret

000004c4 <lcd_putc>:
 4c4:	cf 93       	push	r28
 4c6:	c8 2f       	mov	r28, r24
 4c8:	e1 df       	rcall	.-62     	; 0x48c <lcd_waitbusy>
 4ca:	ca 30       	cpi	r28, 0x0A	; 10
 4cc:	41 f4       	brne	.+16     	; 0x4de <lcd_putc+0x1a>
 4ce:	80 34       	cpi	r24, 0x40	; 64
 4d0:	10 f4       	brcc	.+4      	; 0x4d6 <lcd_putc+0x12>
 4d2:	80 e4       	ldi	r24, 0x40	; 64
 4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <lcd_putc+0x14>
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	80 58       	subi	r24, 0x80	; 128
 4da:	e1 df       	rcall	.-62     	; 0x49e <lcd_command>
 4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <lcd_putc+0x20>
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	8c 2f       	mov	r24, r28
 4e2:	19 df       	rcall	.-462    	; 0x316 <lcd_write>
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <lcd_puts>:
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	fc 01       	movw	r30, r24
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <lcd_puts+0xc>
 4f0:	e9 df       	rcall	.-46     	; 0x4c4 <lcd_putc>
 4f2:	fe 01       	movw	r30, r28
 4f4:	ef 01       	movw	r28, r30
 4f6:	21 96       	adiw	r28, 0x01	; 1
 4f8:	80 81       	ld	r24, Z
 4fa:	81 11       	cpse	r24, r1
 4fc:	f9 cf       	rjmp	.-14     	; 0x4f0 <lcd_puts+0x8>
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 504:	cf 93       	push	r28
 506:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 508:	e1 e0       	ldi	r30, 0x01	; 1
 50a:	f1 e0       	ldi	r31, 0x01	; 1
 50c:	80 81       	ld	r24, Z
 50e:	80 64       	ori	r24, 0x40	; 64
 510:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 512:	84 b1       	in	r24, 0x04	; 4
 514:	80 61       	ori	r24, 0x10	; 16
 516:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 518:	84 b1       	in	r24, 0x04	; 4
 51a:	80 62       	ori	r24, 0x20	; 32
 51c:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 51e:	8d b1       	in	r24, 0x0d	; 13
 520:	80 62       	ori	r24, 0x20	; 32
 522:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 524:	83 b3       	in	r24, 0x13	; 19
 526:	80 62       	ori	r24, 0x20	; 32
 528:	83 bb       	out	0x13, r24	; 19
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 52a:	8d b1       	in	r24, 0x0d	; 13
 52c:	88 60       	ori	r24, 0x08	; 8
 52e:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 530:	80 81       	ld	r24, Z
 532:	88 60       	ori	r24, 0x08	; 8
 534:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 536:	8f e9       	ldi	r24, 0x9F	; 159
 538:	9f e0       	ldi	r25, 0x0F	; 15
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	f1 f7       	brne	.-4      	; 0x53a <lcd_init+0x36>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <lcd_init+0x3c>
 540:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 542:	84 b3       	in	r24, 0x14	; 20
 544:	80 62       	ori	r24, 0x20	; 32
 546:	84 bb       	out	0x14, r24	; 20
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 548:	8e b1       	in	r24, 0x0e	; 14
 54a:	80 62       	ori	r24, 0x20	; 32
 54c:	8e b9       	out	0x0e, r24	; 14
    lcd_e_toggle();
 54e:	db de       	rcall	.-586    	; 0x306 <toggle_e>
 550:	81 ee       	ldi	r24, 0xE1	; 225
 552:	94 e0       	ldi	r25, 0x04	; 4
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <lcd_init+0x50>
 558:	00 c0       	rjmp	.+0      	; 0x55a <lcd_init+0x56>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 55a:	00 00       	nop
 55c:	d4 de       	rcall	.-600    	; 0x306 <toggle_e>
 55e:	95 e1       	ldi	r25, 0x15	; 21
 560:	9a 95       	dec	r25
 562:	f1 f7       	brne	.-4      	; 0x560 <lcd_init+0x5c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 564:	00 00       	nop
 566:	cf de       	rcall	.-610    	; 0x306 <toggle_e>
 568:	85 e1       	ldi	r24, 0x15	; 21
 56a:	8a 95       	dec	r24
 56c:	f1 f7       	brne	.-4      	; 0x56a <lcd_init+0x66>
 56e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 570:	8e b1       	in	r24, 0x0e	; 14
 572:	8f 7d       	andi	r24, 0xDF	; 223
    lcd_e_toggle();
 574:	8e b9       	out	0x0e, r24	; 14
 576:	c7 de       	rcall	.-626    	; 0x306 <toggle_e>
 578:	95 e1       	ldi	r25, 0x15	; 21
 57a:	9a 95       	dec	r25
 57c:	f1 f7       	brne	.-4      	; 0x57a <lcd_init+0x76>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 57e:	00 00       	nop
 580:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 582:	8d df       	rcall	.-230    	; 0x49e <lcd_command>
 584:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
 586:	8b df       	rcall	.-234    	; 0x49e <lcd_command>
 588:	9a df       	rcall	.-204    	; 0x4be <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 58a:	86 e0       	ldi	r24, 0x06	; 6
 58c:	88 df       	rcall	.-240    	; 0x49e <lcd_command>
 58e:	8c 2f       	mov	r24, r28
    lcd_command(dispAttr);                  /* display/cursor control       */
 590:	86 df       	rcall	.-244    	; 0x49e <lcd_command>
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <setup>:
#include <stdlib.h>

// Initialize LCD and Keypad
void setup() {
	// Initialize LCD
	lcd_init(LCD_DISP_ON);
 596:	8c e0       	ldi	r24, 0x0C	; 12
 598:	b5 df       	rcall	.-150    	; 0x504 <lcd_init>
	lcd_clrscr();
 59a:	91 df       	rcall	.-222    	; 0x4be <lcd_clrscr>
 59c:	80 e0       	ldi	r24, 0x00	; 0
	lcd_puts("Ready");
 59e:	92 e0       	ldi	r25, 0x02	; 2
 5a0:	a3 df       	rcall	.-186    	; 0x4e8 <lcd_puts>
 5a2:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a4:	83 ed       	ldi	r24, 0xD3	; 211
 5a6:	90 e3       	ldi	r25, 0x30	; 48
 5a8:	21 50       	subi	r18, 0x01	; 1
 5aa:	80 40       	sbci	r24, 0x00	; 0
 5ac:	90 40       	sbci	r25, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <setup+0x12>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <setup+0x1c>
 5b2:	00 00       	nop
	_delay_ms(1000); // Delay to display initial message

	// Initialize Keypad
	KEYPAD_Init();
 5b4:	3f ce       	rjmp	.-898    	; 0x234 <KEYPAD_Init>
 5b6:	08 95       	ret

000005b8 <main>:
 5b8:	cf 93       	push	r28
}

int main(void) {
 5ba:	df 93       	push	r29
 5bc:	00 d0       	rcall	.+0      	; 0x5be <main+0x6>
 5be:	1f 92       	push	r1
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
	setup();
 5c4:	e8 df       	rcall	.-48     	; 0x596 <setup>

	while (1) {
		// Read raw signal from keypad
		uint8_t key_signal = KEYPAD_GetKey();
 5c6:	68 de       	rcall	.-816    	; 0x298 <KEYPAD_GetKey>
 5c8:	2f ef       	ldi	r18, 0xFF	; 255
 5ca:	35 ea       	ldi	r19, 0xA5	; 165
 5cc:	9e e0       	ldi	r25, 0x0E	; 14
 5ce:	21 50       	subi	r18, 0x01	; 1
 5d0:	30 40       	sbci	r19, 0x00	; 0
 5d2:	90 40       	sbci	r25, 0x00	; 0
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <main+0x16>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <main+0x20>
 5d8:	00 00       	nop
 5da:	8f 3f       	cpi	r24, 0xFF	; 255

		_delay_ms(300);

		// Check for valid key press
		if (key_signal != 0xFF) { // Assuming 0xFF means no key pressed
 5dc:	a1 f3       	breq	.-24     	; 0x5c6 <main+0xe>
 5de:	9f ec       	ldi	r25, 0xCF	; 207
			char key_str[4];

			// Check if it's a numeric key (1 to 9) or special key (A, B, C, D, *, #)
			if (key_signal >= '1' && key_signal <= '9') {
 5e0:	98 0f       	add	r25, r24
 5e2:	99 30       	cpi	r25, 0x09	; 9
 5e4:	40 f4       	brcc	.+16     	; 0x5f6 <main+0x3e>
 5e6:	80 53       	subi	r24, 0x30	; 48
				// Convert key to numeric value
				uint8_t key_value = key_signal - '0'; // Convert ASCII value to numeric value
 5e8:	4a e0       	ldi	r20, 0x0A	; 10
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5ea:	be 01       	movw	r22, r28
 5ec:	6f 5f       	subi	r22, 0xFF	; 255
 5ee:	7f 4f       	sbci	r23, 0xFF	; 255
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	16 d0       	rcall	.+44     	; 0x620 <__itoa_ncheck>
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <main+0x42>
 5f6:	89 83       	std	Y+1, r24	; 0x01
				itoa(key_value, key_str, 10); // Convert numeric value to string

				} else {
				// For special keys, just display the character
				key_str[0] = key_signal;
 5f8:	1a 82       	std	Y+2, r1	; 0x02
				key_str[1] = '\0'; // Null terminate the string
 5fa:	61 df       	rcall	.-318    	; 0x4be <lcd_clrscr>
			}

			// Display the key on the LCD
			lcd_clrscr();
 5fc:	86 e0       	ldi	r24, 0x06	; 6
			lcd_puts("Key Pressed:");
 5fe:	92 e0       	ldi	r25, 0x02	; 2
 600:	73 df       	rcall	.-282    	; 0x4e8 <lcd_puts>
 602:	61 e0       	ldi	r22, 0x01	; 1
			lcd_gotoxy(0, 1);
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	53 df       	rcall	.-346    	; 0x4ae <lcd_gotoxy>
 608:	ce 01       	movw	r24, r28
			lcd_puts(key_str);
 60a:	01 96       	adiw	r24, 0x01	; 1
 60c:	6d df       	rcall	.-294    	; 0x4e8 <lcd_puts>
 60e:	db cf       	rjmp	.-74     	; 0x5c6 <main+0xe>

00000610 <__tablejump2__>:
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	88 1f       	adc	r24, r24
 616:	8b bf       	out	0x3b, r24	; 59
 618:	07 90       	elpm	r0, Z+
 61a:	f6 91       	elpm	r31, Z
 61c:	e0 2d       	mov	r30, r0
 61e:	19 94       	eijmp

00000620 <__itoa_ncheck>:
 620:	bb 27       	eor	r27, r27
 622:	4a 30       	cpi	r20, 0x0A	; 10
 624:	31 f4       	brne	.+12     	; 0x632 <__itoa_ncheck+0x12>
 626:	99 23       	and	r25, r25
 628:	22 f4       	brpl	.+8      	; 0x632 <__itoa_ncheck+0x12>
 62a:	bd e2       	ldi	r27, 0x2D	; 45
 62c:	90 95       	com	r25
 62e:	81 95       	neg	r24
 630:	9f 4f       	sbci	r25, 0xFF	; 255
 632:	01 c0       	rjmp	.+2      	; 0x636 <__utoa_common>

00000634 <__utoa_ncheck>:
 634:	bb 27       	eor	r27, r27

00000636 <__utoa_common>:
 636:	fb 01       	movw	r30, r22
 638:	55 27       	eor	r21, r21
 63a:	aa 27       	eor	r26, r26
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	aa 1f       	adc	r26, r26
 642:	a4 17       	cp	r26, r20
 644:	10 f0       	brcs	.+4      	; 0x64a <__utoa_common+0x14>
 646:	a4 1b       	sub	r26, r20
 648:	83 95       	inc	r24
 64a:	50 51       	subi	r21, 0x10	; 16
 64c:	b9 f7       	brne	.-18     	; 0x63c <__utoa_common+0x6>
 64e:	a0 5d       	subi	r26, 0xD0	; 208
 650:	aa 33       	cpi	r26, 0x3A	; 58
 652:	08 f0       	brcs	.+2      	; 0x656 <__utoa_common+0x20>
 654:	a9 5d       	subi	r26, 0xD9	; 217
 656:	a1 93       	st	Z+, r26
 658:	00 97       	sbiw	r24, 0x00	; 0
 65a:	79 f7       	brne	.-34     	; 0x63a <__utoa_common+0x4>
 65c:	b1 11       	cpse	r27, r1
 65e:	b1 93       	st	Z+, r27
 660:	11 92       	st	Z+, r1
 662:	cb 01       	movw	r24, r22
 664:	00 c0       	rjmp	.+0      	; 0x666 <strrev>

00000666 <strrev>:
 666:	dc 01       	movw	r26, r24
 668:	fc 01       	movw	r30, r24
 66a:	67 2f       	mov	r22, r23
 66c:	71 91       	ld	r23, Z+
 66e:	77 23       	and	r23, r23
 670:	e1 f7       	brne	.-8      	; 0x66a <strrev+0x4>
 672:	32 97       	sbiw	r30, 0x02	; 2
 674:	04 c0       	rjmp	.+8      	; 0x67e <strrev+0x18>
 676:	7c 91       	ld	r23, X
 678:	6d 93       	st	X+, r22
 67a:	70 83       	st	Z, r23
 67c:	62 91       	ld	r22, -Z
 67e:	ae 17       	cp	r26, r30
 680:	bf 07       	cpc	r27, r31
 682:	c8 f3       	brcs	.-14     	; 0x676 <strrev+0x10>
 684:	08 95       	ret

00000686 <_exit>:
 686:	f8 94       	cli

00000688 <__stop_program>:
 688:	ff cf       	rjmp	.-2      	; 0x688 <__stop_program>
