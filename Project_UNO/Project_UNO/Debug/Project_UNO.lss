
Project_UNO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c5  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000642  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000249  00000000  00000000  00000efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000362  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000156a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__vector_17>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6d 00 	call	0xda	; 0xda <main>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <spi_slave_init>:
#define DOOR_LED_PIN  PB1   /* ArduinoÂ D9 */

/* ---------------- SPI slave ---------------- */
static void spi_slave_init(void)
{
    DDRB |= (1<<PB4);      /* MISO output            */
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 61       	ori	r24, 0x10	; 16
  84:	84 b9       	out	0x04, r24	; 4
    SPCR = (1<<SPE) | (1<<SPIE);   /* Enable SPI + interrupt */
  86:	80 ec       	ldi	r24, 0xC0	; 192
  88:	8c bd       	out	0x2c, r24	; 44
  8a:	08 95       	ret

0000008c <__vector_17>:
}

ISR(SPI_STC_vect)
{
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	8f 93       	push	r24
    uint8_t cmd = SPDR;    /* latched byte from master */
  98:	8e b5       	in	r24, 0x2e	; 46
    switch(cmd)
  9a:	81 31       	cpi	r24, 0x11	; 17
  9c:	69 f0       	breq	.+26     	; 0xb8 <__vector_17+0x2c>
  9e:	18 f4       	brcc	.+6      	; 0xa6 <__vector_17+0x1a>
  a0:	80 31       	cpi	r24, 0x10	; 16
  a2:	31 f0       	breq	.+12     	; 0xb0 <__vector_17+0x24>
  a4:	14 c0       	rjmp	.+40     	; 0xce <__vector_17+0x42>
  a6:	82 31       	cpi	r24, 0x12	; 18
  a8:	59 f0       	breq	.+22     	; 0xc0 <__vector_17+0x34>
  aa:	83 31       	cpi	r24, 0x13	; 19
  ac:	69 f0       	breq	.+26     	; 0xc8 <__vector_17+0x3c>
  ae:	0f c0       	rjmp	.+30     	; 0xce <__vector_17+0x42>
    {
    case CMD_MOVEMENT_LED_ON:  MOV_LED_PORT |=  _BV(MOV_LED_PIN); break;
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	0b c0       	rjmp	.+22     	; 0xce <__vector_17+0x42>
    case CMD_MOVEMENT_LED_OFF: MOV_LED_PORT &= ~_BV(MOV_LED_PIN); break;
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	8e 7f       	andi	r24, 0xFE	; 254
  bc:	85 b9       	out	0x05, r24	; 5
  be:	07 c0       	rjmp	.+14     	; 0xce <__vector_17+0x42>
    case CMD_DOOR_LED_ON:      DOOR_LED_PORT |=  _BV(DOOR_LED_PIN); break;
  c0:	85 b1       	in	r24, 0x05	; 5
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	85 b9       	out	0x05, r24	; 5
  c6:	03 c0       	rjmp	.+6      	; 0xce <__vector_17+0x42>
    case CMD_DOOR_LED_OFF:     DOOR_LED_PORT &= ~_BV(DOOR_LED_PIN); break;
  c8:	85 b1       	in	r24, 0x05	; 5
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	85 b9       	out	0x05, r24	; 5
    default: break; /* ignore unknown */
    }
}
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <main>:

int main(void)
{
    /* Configure LED pins as output */
    MOV_LED_DDR  |= _BV(MOV_LED_PIN);
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	84 b9       	out	0x04, r24	; 4
    DOOR_LED_DDR |= _BV(DOOR_LED_PIN);
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	84 b9       	out	0x04, r24	; 4
    /* Initial off */
    MOV_LED_PORT &= ~_BV(MOV_LED_PIN);
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	85 b9       	out	0x05, r24	; 5
    DOOR_LED_PORT &= ~_BV(DOOR_LED_PIN);
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	8d 7f       	andi	r24, 0xFD	; 253
  f0:	85 b9       	out	0x05, r24	; 5

    spi_slave_init();
  f2:	0e 94 40 00 	call	0x80	; 0x80 <spi_slave_init>
    sei();
  f6:	78 94       	sei
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x1e>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
